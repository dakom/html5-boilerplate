{"version":3,"file":"pixi-sound.min.js","sources":["../node_modules/es6-object-assign/index.js","../src/Filterable.ts","../src/filters/Filter.ts","../node_modules/promise-polyfill/promise.js","../src/htmlaudio/HTMLAudioInstance.ts","../src/htmlaudio/HTMLAudioMedia.ts","../src/htmlaudio/HTMLAudioContext.ts","../src/loader/index.ts","../src/sprites/SoundSprite.ts","../src/webaudio/WebAudioInstance.ts","../src/webaudio/WebAudioNodes.ts","../src/webaudio/WebAudioMedia.ts","../src/Sound.ts","../src/utils/SoundUtils.ts","../src/webaudio/WebAudioContext.ts","../src/SoundLibrary.ts","../src/filters/EqualizerFilter.ts","../src/filters/DistortionFilter.ts","../src/filters/StereoFilter.ts","../src/filters/ReverbFilter.ts","../src/filters/MonoFilter.ts","../src/filters/TelephoneFilter.ts","../src/index.ts"],"sourcesContent":["/**\n * Code refactored from Mozilla Developer Network:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n\n'use strict';\n\nfunction assign(target, firstSource) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert first argument to object');\n  }\n\n  var to = Object(target);\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null) {\n      continue;\n    }\n\n    var keysArray = Object.keys(Object(nextSource));\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n      if (desc !== undefined && desc.enumerable) {\n        to[nextKey] = nextSource[nextKey];\n      }\n    }\n  }\n  return to;\n}\n\nfunction polyfill() {\n  if (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign\n    });\n  }\n}\n\nmodule.exports = {\n  assign: assign,\n  polyfill: polyfill\n};\n","import Filter from \"./filters/Filter\";\n\n/**\n * Abstract class which SoundNodes and SoundContext\n * both extend. This provides the functionality for adding\n * dynamic filters.\n * @class Filterable\n * @memberof PIXI.sound\n * @param {AudioNode} source The source audio node\n * @param {AudioNode} destination The output audio node\n */\nexport default class Filterable\n{\n    /**\n     * Get the gain node\n     * @name PIXI.sound.Filterable#_input\n     * @type {AudioNode}\n     * @private\n     */\n    private _input: AudioNode;\n\n    /**\n     * The destination output audio node\n     * @name PIXI.sound.Filterable#_output\n     * @type {AudioNode}\n     * @private\n     */\n    private _output: AudioNode;\n\n    /**\n     * Collection of filters.\n     * @name PIXI.sound.Filterable#_filters\n     * @type {PIXI.sound.filters.Filter[]}\n     * @private\n     */\n    private _filters: Filter[];\n\n    constructor(input: AudioNode, output: AudioNode)\n    {\n        this._output = output;\n        this._input = input;\n    }\n\n    /**\n     * The destination output audio node\n     * @name PIXI.sound.Filterable#destination\n     * @type {AudioNode}\n     * @readonly\n     */\n    get destination(): AudioNode\n    {\n        return this._input;\n    }\n\n    /**\n     * The collection of filters\n     * @name PIXI.sound.Filterable#filters\n     * @type {PIXI.sound.filters.Filter[]}\n     */\n    get filters(): Filter[]\n    {\n        return this._filters;\n    }\n    set filters(filters: Filter[])\n    {\n        if (this._filters)\n        {\n            this._filters.forEach((filter: Filter) => {\n                if (filter)\n                {\n                    filter.disconnect();\n                }\n            });\n            this._filters = null;\n            // Reconnect direct path\n            this._input.connect(this._output);\n        }\n\n        if (filters && filters.length)\n        {\n            this._filters = filters.slice(0);\n\n            // Disconnect direct path before inserting filters\n            this._input.disconnect();\n\n            // Connect each filter\n            let prevFilter: Filter = null;\n            filters.forEach((filter: Filter) => {\n                if (prevFilter === null)\n                {\n                    // first filter is the destination\n                    // for the analyser\n                    this._input.connect(filter.destination);\n                }\n                else\n                {\n                    prevFilter.connect(filter.destination);\n                }\n                prevFilter = filter;\n            });\n            prevFilter.connect(this._output);\n        }\n    }\n\n    /**\n     * Cleans up.\n     * @method PIXI.sound.Filterable#destroy\n     */\n    public destroy(): void\n    {\n        this.filters = null;\n        this._input = null;\n        this._output = null;\n    }\n}\n","/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n *\n * @class Filter\n * @memberof PIXI.sound.filters\n * @param {AudioNode} destination The audio node to use as the destination for the input AudioNode\n * @param {AudioNode} [source] Optional output node, defaults to destination node. This is useful\n *        when creating filters which contains multiple AudioNode elements chained together.\n */\nexport default class Filter\n{\n    /**\n     * The node to connect for the filter to the previous filter.\n     * @name PIXI.sound.filters.Filter#destination\n     * @type {AudioNode}\n     */\n    public destination:AudioNode;\n\n    /**\n     * The node to connect for the filter to the previous filter.\n     * @name PIXI.sound.filters.Filter#source\n     * @type {AudioNode}\n     */\n    public source:AudioNode;\n    \n    constructor(destination:AudioNode, source?:AudioNode)\n    {\n        this.destination = destination;\n        this.source = source || destination;\n    }\n\n    /**\n     * Connect to the destination.\n     * @method PIXI.sound.filters.Filter#connect\n     * @param {AudioNode} destination The destination node to connect the output to\n     */\n    connect(destination:AudioNode): void\n    {\n        this.source.connect(destination);\n    }\n\n    /**\n     * Completely disconnect filter from destination and source nodes.\n     * @method PIXI.sound.filters.Filter#disconnect\n     */\n    disconnect(): void\n    {\n        this.source.disconnect();\n    }\n\n    /**\n     * Destroy the filter and don't use after this.\n     * @method PIXI.sound.filters.Filter#destroy\n     */\n    destroy(): void\n    {\n        this.disconnect();\n        this.destination = null;\n        this.source = null;\n    }\n}\n","(function (root) {\n\n  // Store setTimeout reference so promise-polyfill will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var setTimeoutFunc = setTimeout;\n\n  function noop() {}\n  \n  // Polyfill for Function.prototype.bind\n  function bind(fn, thisArg) {\n    return function () {\n      fn.apply(thisArg, arguments);\n    };\n  }\n\n  function Promise(fn) {\n    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');\n    if (typeof fn !== 'function') throw new TypeError('not a function');\n    this._state = 0;\n    this._handled = false;\n    this._value = undefined;\n    this._deferreds = [];\n\n    doResolve(fn, this);\n  }\n\n  function handle(self, deferred) {\n    while (self._state === 3) {\n      self = self._value;\n    }\n    if (self._state === 0) {\n      self._deferreds.push(deferred);\n      return;\n    }\n    self._handled = true;\n    Promise._immediateFn(function () {\n      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n      if (cb === null) {\n        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n        return;\n      }\n      var ret;\n      try {\n        ret = cb(self._value);\n      } catch (e) {\n        reject(deferred.promise, e);\n        return;\n      }\n      resolve(deferred.promise, ret);\n    });\n  }\n\n  function resolve(self, newValue) {\n    try {\n      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');\n      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n        var then = newValue.then;\n        if (newValue instanceof Promise) {\n          self._state = 3;\n          self._value = newValue;\n          finale(self);\n          return;\n        } else if (typeof then === 'function') {\n          doResolve(bind(then, newValue), self);\n          return;\n        }\n      }\n      self._state = 1;\n      self._value = newValue;\n      finale(self);\n    } catch (e) {\n      reject(self, e);\n    }\n  }\n\n  function reject(self, newValue) {\n    self._state = 2;\n    self._value = newValue;\n    finale(self);\n  }\n\n  function finale(self) {\n    if (self._state === 2 && self._deferreds.length === 0) {\n      Promise._immediateFn(function() {\n        if (!self._handled) {\n          Promise._unhandledRejectionFn(self._value);\n        }\n      });\n    }\n\n    for (var i = 0, len = self._deferreds.length; i < len; i++) {\n      handle(self, self._deferreds[i]);\n    }\n    self._deferreds = null;\n  }\n\n  function Handler(onFulfilled, onRejected, promise) {\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n    this.promise = promise;\n  }\n\n  /**\n   * Take a potentially misbehaving resolver function and make sure\n   * onFulfilled and onRejected are only called once.\n   *\n   * Makes no guarantees about asynchrony.\n   */\n  function doResolve(fn, self) {\n    var done = false;\n    try {\n      fn(function (value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      }, function (reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      });\n    } catch (ex) {\n      if (done) return;\n      done = true;\n      reject(self, ex);\n    }\n  }\n\n  Promise.prototype['catch'] = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n\n  Promise.prototype.then = function (onFulfilled, onRejected) {\n    var prom = new (this.constructor)(noop);\n\n    handle(this, new Handler(onFulfilled, onRejected, prom));\n    return prom;\n  };\n\n  Promise.all = function (arr) {\n    var args = Array.prototype.slice.call(arr);\n\n    return new Promise(function (resolve, reject) {\n      if (args.length === 0) return resolve([]);\n      var remaining = args.length;\n\n      function res(i, val) {\n        try {\n          if (val && (typeof val === 'object' || typeof val === 'function')) {\n            var then = val.then;\n            if (typeof then === 'function') {\n              then.call(val, function (val) {\n                res(i, val);\n              }, reject);\n              return;\n            }\n          }\n          args[i] = val;\n          if (--remaining === 0) {\n            resolve(args);\n          }\n        } catch (ex) {\n          reject(ex);\n        }\n      }\n\n      for (var i = 0; i < args.length; i++) {\n        res(i, args[i]);\n      }\n    });\n  };\n\n  Promise.resolve = function (value) {\n    if (value && typeof value === 'object' && value.constructor === Promise) {\n      return value;\n    }\n\n    return new Promise(function (resolve) {\n      resolve(value);\n    });\n  };\n\n  Promise.reject = function (value) {\n    return new Promise(function (resolve, reject) {\n      reject(value);\n    });\n  };\n\n  Promise.race = function (values) {\n    return new Promise(function (resolve, reject) {\n      for (var i = 0, len = values.length; i < len; i++) {\n        values[i].then(resolve, reject);\n      }\n    });\n  };\n\n  // Use polyfill for setImmediate for performance gains\n  Promise._immediateFn = (typeof setImmediate === 'function' && function (fn) { setImmediate(fn); }) ||\n    function (fn) {\n      setTimeoutFunc(fn, 0);\n    };\n\n  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n    if (typeof console !== 'undefined' && console) {\n      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n    }\n  };\n\n  /**\n   * Set the immediate function to execute callbacks\n   * @param fn {function} Function to execute\n   * @deprecated\n   */\n  Promise._setImmediateFn = function _setImmediateFn(fn) {\n    Promise._immediateFn = fn;\n  };\n\n  /**\n   * Change the function to execute on unhandled rejection\n   * @param {function} fn Function to execute on unhandled rejection\n   * @deprecated\n   */\n  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {\n    Promise._unhandledRejectionFn = fn;\n  };\n  \n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Promise;\n  } else if (!root.Promise) {\n    root.Promise = Promise;\n  }\n\n})(this);\n","import HTMLAudioMedia from \"./HTMLAudioMedia\";\nimport {IMediaInstance} from \"../interfaces/IMediaInstance\";\n\nlet id = 0;\n\n/**\n * Instance which wraps the `<audio>` element playback.\n * @class HTMLAudioInstance\n * @memberof PIXI.sound.htmlaudio\n */\nexport default class HTMLAudioInstance extends PIXI.utils.EventEmitter implements IMediaInstance\n{\n    /**\n     * Extra padding, in seconds, to deal with low-latecy of HTMLAudio.\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance.PADDING\n     * @readonly\n     * @default 0.1\n     */\n    public static PADDING: number = 0.1;\n\n    /**\n     * The current unique ID for this instance.\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#id\n     * @readonly\n     */\n    public id: number;\n\n    /**\n     * The instance of the Audio element.\n     * @type {HTMLAudioElement}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_source\n     * @private\n     */\n    private _source: HTMLAudioElement;\n\n    /**\n     * The instance of the Audio media element.\n     * @type {PIXI.sound.htmlaudio.HTMLAudioMedia}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_source\n     * @private\n     */\n    private _parent: HTMLAudioMedia;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {Number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_end\n     * @private\n     */\n    private _end: number;\n\n\n    private _paused: boolean;\n\n    /**\n     * Total length of the audio.\n     * @type {Number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_duration\n     * @private\n     */\n    private _duration: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {Number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_start\n     * @private\n     */\n    private _start: number;\n\n    /**\n     * `true` if the audio is actually playing.\n     * @type {Boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_playing\n     * @private\n     */\n    private _playing: boolean;\n\n    /**\n     * Handle local or global volume or mute changes.\n     * @type {Function}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_onVolumeChanged\n     * @private\n     */\n    private _onVolumeChanged: Function;\n\n    /**\n     * Handle global pause changes.\n     * @type {Function}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_onPausedChanged\n     * @private\n     */\n    private _onPausedChanged: Function;\n\n    constructor(parent: HTMLAudioMedia)\n    {\n        super();\n\n        this.id = id++;\n\n        this.init(parent);  \n    }\n\n    /**\n     * The current playback progress from 0 to 1.\n     * @type {Number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#progress\n     */\n    public get progress(): number\n    {\n        const {currentTime} = this._source;\n        return currentTime / this._duration;\n    }\n\n    /**\n     * Pauses the sound.\n     * @type {Boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#paused\n     */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n    public set paused(paused: boolean)\n    {\n        const contextPaused = this._parent.context.paused;\n\n        if (paused === this._paused && contextPaused === this._paused)\n        {\n            // Do nothing, no pause change\n            return;\n        }\n\n        this._paused = paused;\n\n        if (paused || contextPaused)\n        {\n            this._internalStop();\n\n            /**\n             * The sound is paused.\n             * @event PIXI.sound.htmlaudio.HTMLAudioInstance#paused\n             */\n            this.emit(\"paused\");\n        }\n        else\n        {\n            /**\n             * The sound is unpaused.\n             * @event PIXI.sound.htmlaudio.HTMLAudioInstance#resumed\n             */\n            this.emit(\"resumed\");\n\n            // resume the playing with offset\n            this.play(\n                this._source.currentTime,\n                this._end,\n                1,\n                this._source.loop,\n                0,\n                0,\n            );\n        }\n\n        /**\n         * The sound is paused or unpaused.\n         * @event PIXI.sound.htmlaudio.HTMLAudioInstance#pause\n         * @property {Boolean} paused If the instance was paused or not.\n         */\n        this.emit(\"pause\", paused);\n    }\n\n    /**\n     * Reference: http://stackoverflow.com/a/40370077\n     */\n    private _onPlay(): void\n    {\n        this._playing = true;\n    }\n\n    /**\n     * Reference: http://stackoverflow.com/a/40370077\n     */\n    private _onPause(): void\n    {\n        this._playing = false;\n    }\n\n    /**\n     * Initialize the instance.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#init\n     * @param {PIXI.sound.htmlaudio.HTMLAudioMedia} parent\n     */\n    public init(parent: HTMLAudioMedia): void\n    {\n        this._playing = false;\n        this._duration = parent.source.duration;\n        const source = this._source = parent.source.cloneNode(false) as HTMLAudioElement;\n        source.src = parent.parent.url;\n        source.onplay = this._onPlay.bind(this);\n        source.onpause = this._onPause.bind(this);\n\n        // Update on global volume changes\n        this._onVolumeChanged = () => {\n            let volume = parent.volume;\n            volume *= parent.context.volume;\n            volume *= parent.context.muted ? 0 : 1;\n            source.volume = volume;\n        };\n\n        this._onPausedChanged = () => {\n            this.paused = this.paused;\n        };\n\n        parent.on('volume', this._onVolumeChanged);\n        parent.context.on('volume', this._onVolumeChanged);\n        parent.context.on('muted', this._onVolumeChanged);\n        parent.context.on('paused', this._onPausedChanged);\n\n        this._parent = parent;\n        this._onPausedChanged();\n        this._onVolumeChanged();\n    }\n\n    /**\n     * Stop the sound playing\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_internalStop\n     * @private\n     */\n    private _internalStop(): void\n    {\n        if (this._source && this._playing)\n        {\n            this._source.onended = null;\n            this._source.pause();\n        }\n    }\n\n    /**\n     * Stop the sound playing\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#stop\n     */\n    public stop(): void\n    {\n        this._internalStop();\n\n        if (this._source)\n        {\n            this.emit(\"stop\");\n        }\n    }\n\n    /**\n     * Start playing the sound/\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#play\n     */\n    public play(start: number, end: number, speed: number, loop: boolean, fadeIn: number, fadeOut: number): void\n    {\n        // @if DEBUG\n        if (end)\n        {\n            console.assert(end > start, \"End time is before start time\");\n        }\n        // @endif\n        if (loop !== undefined)\n        {\n            this._source.loop = loop;\n        }\n\n        // WebAudio doesn't support looping when a duration is set\n        // we'll set this just for the heck of it\n        if (loop === true && end !== undefined)\n        {\n            // @if DEBUG\n            console.warn('Looping not support when specifying an \"end\" time');\n            // @endif\n            this._source.loop = false;\n        }\n        \n        this._start = start;\n        this._end = end || this._duration;\n\n        // Lets expand the start and end a little\n        // to deal with the low-latecy of playing audio this way\n        // this is a little fudge-factor\n        this._start = Math.max(0, this._start - HTMLAudioInstance.PADDING);\n        this._end = Math.min(this._end + HTMLAudioInstance.PADDING, this._duration);\n\n        this._source.onloadedmetadata = () => {\n            if (this._source)\n            {\n                this._source.currentTime = start;\n                this._source.onloadedmetadata = null;\n                this.emit(\"progress\", start, this._duration);\n                PIXI.ticker.shared.add(this._onUpdate, this);\n            }\n        };\n        this._source.onended = this._onComplete.bind(this);\n        this._source.play();\n\n        /**\n         * The sound is started.\n         * @event PIXI.sound.htmlaudio.HTMLAudioInstance#start\n         */\n        this.emit(\"start\");\n    }\n\n    /**\n     * Handle time update on sound.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_onUpdate\n     * @private\n     */\n    private _onUpdate(): void\n    {\n        this.emit(\"progress\", this.progress, this._duration);\n        if (this._source.currentTime >= this._end && !this._source.loop)\n        {\n            this._onComplete();\n        }\n    }\n\n    /**\n     * Callback when completed.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_onComplete\n     * @private\n     */\n    private _onComplete(): void\n    {\n        PIXI.ticker.shared.remove(this._onUpdate, this);\n        this._internalStop();\n        this.emit(\"progress\", 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event PIXI.sound.htmlaudio.HTMLAudioInstance#end\n         */\n        this.emit(\"end\", this);\n    }\n\n    /**\n     * Don't use after this.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#destroy\n     */\n    public destroy(): void\n    {\n        PIXI.ticker.shared.remove(this._onUpdate, this);\n        this.removeAllListeners();\n\n        const source = this._source;\n\n        if (source)\n        {\n            // Remove the listeners\n            source.onended = null;\n            source.onplay = null;\n            source.onpause = null;\n\n            this._internalStop();\n        }\n\n        this._source = null;\n\n        this._end = 0;\n        this._start = 0;\n        this._duration = 0;\n        this._playing = false;\n\n        // Remove parent listener for volume changes\n        const parent = this._parent;\n\n        if (parent)\n        {\n            parent.off('volume', this._onVolumeChanged);\n            parent.context.off('muted', this._onVolumeChanged);\n            parent.context.off('volume', this._onVolumeChanged);\n            parent.context.off('paused', this._onPausedChanged);\n        }\n\n        this._parent = null;\n        this._onVolumeChanged = null;\n        this._onPausedChanged = null;\n    }\n\n    /**\n     * To string method for instance.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#toString\n     * @return {String} The string representation of instance.\n     * @private\n     */\n    public toString(): string\n    {\n        return \"[HTMLAudioInstance id=\" + this.id + \"]\";\n    }\n}\n","import {Options, LoadedCallback, CompleteCallback, PlayOptions} from '../Sound';\nimport Sound from \"../Sound\";\nimport {SoundSpriteData, SoundSprites} from \"../sprites/SoundSprite\";\nimport SoundSprite from \"../sprites/SoundSprite\";\nimport {IMedia} from '../interfaces/IMedia';\nimport HTMLAudioContext from \"./HTMLAudioContext\";\nimport HTMLAudioInstance from \"./HTMLAudioInstance\";\nimport Filter from \"../filters/Filter\";\n\n/**\n * The fallback version of Sound which uses `<audio>` instead of WebAudio API.\n * @class HTMLAudioMedia\n * @memberof PIXI.sound.htmlaudio\n * @param {HTMLAudioElement|String|Object} options Either the path or url to the source file.\n *        or the object of options to use. See {@link PIXI.sound.Sound.from}\n */\nexport default class HTMLAudioMedia extends PIXI.utils.EventEmitter implements IMedia\n{\n    public parent: Sound;\n    private _source: HTMLAudioElement;\n\n    init(parent: Sound): void\n    {\n        this.parent = parent;\n        this._source = parent.options.source as HTMLAudioElement || new Audio();\n        this.speed = parent.options.speed;\n        if (parent.url)\n        {\n            this._source.src = parent.url;\n        }\n    }\n\n    // Implement create\n    public create(): HTMLAudioInstance\n    {\n        return new HTMLAudioInstance(this);\n    }\n\n    // Implement isPlayable\n    public get isPlayable(): boolean\n    {\n        return !!this._source && this._source.readyState === 4;\n    }\n\n    // Implement volume\n    public set volume(volume:number)\n    {\n        const oldVolume = this.volume;\n\n        this._source.volume = volume;\n        if (volume !== oldVolume)\n        {\n            this.emit('volume', volume);\n        }\n    }\n    public get volume():number\n    {\n        return this._source.volume;\n    }\n\n    // Implement loop\n    public set loop(loop:boolean)\n    {\n        this._source.loop = loop;\n    }\n\n    // Implement speed\n    public get speed(): number\n    {\n        return this._source.playbackRate;\n    }\n    public set speed(value: number)\n    {\n        const oldSpeed = this.speed;\n\n        this._source.playbackRate = value;\n        if (value != oldSpeed)\n        {\n            this.emit('speed', value);\n        }\n    }\n\n    // Implement duration\n    public get duration(): number\n    {\n        return this._source.duration;\n    }\n\n    // Implement context\n    public get context(): HTMLAudioContext\n    {\n        return this.parent.context as HTMLAudioContext;\n    }\n\n    // Implement filters\n    public get filters(): Filter[]\n    {\n        return null;\n    }\n    public set filters(filters: Filter[])\n    {\n        // @if DEBUG\n        console.warn('HTML Audio does not support filters');\n        // @endif\n    }\n\n    // Override the destroy\n    public destroy(): void\n    {\n        this.removeAllListeners();\n\n        this.parent = null;\n\n        if (this._source)\n        {\n            this._source.src = \"\";\n            this._source.load();\n            this._source = null;\n        }\n    }\n\n    /**\n     * Get the audio source element.\n     * @name PIXI.sound.legacy.LegacySound#source\n     * @type {HTMLAudioElement}\n     * @readonly\n     */\n    public get source(): HTMLAudioElement\n    {\n        return this._source;\n    }\n\n    // Implement the method to being preloading\n    public load(callback?: LoadedCallback): void\n    {\n        const source = this._source;\n        const sound = this.parent;\n\n        // See if the source is already loaded\n        if (source.readyState === 4)\n        {\n            sound.isLoaded = true;\n            const instance = sound.autoPlayStart();\n            if (callback)\n            {\n                setTimeout(() =>\n                {\n                    callback(null, sound, instance);\n                }, 0);\n            }\n            return;\n        }\n\n        // If there's no source, we cannot load\n        if (!sound.url)\n        {\n            return callback(new Error(\"sound.url or sound.source must be set\"));\n        }\n\n        // Set the source\n        source.src = sound.url;\n\n        // Remove all event listeners\n        const removeListeners = () =>\n        {\n            // Listen for callback\n            source.removeEventListener('canplaythrough', onLoad);\n            source.removeEventListener('load', onLoad);\n            source.removeEventListener('abort', onAbort);\n            source.removeEventListener('error', onError);\n        };\n\n        const onLoad = () =>\n        {\n            removeListeners();\n            sound.isLoaded = true;\n            const instance = sound.autoPlayStart();\n            if (callback)\n            {\n                callback(null, sound, instance);\n            }\n        };\n\n        const onAbort = () =>\n        {\n            removeListeners();\n            if (callback)\n            {\n                callback(new Error('Sound loading has been aborted'));\n            }\n        };\n\n        const onError = () =>\n        {\n            removeListeners();\n            const message = `Failed to load audio element (code: ${source.error.code})`;\n            if (callback)\n            {\n                callback(new Error(message));\n            }\n            else\n            {\n                console.error(message);\n            }\n        };\n\n        // Listen for callback\n        source.addEventListener('canplaythrough', onLoad, false);\n        source.addEventListener('load', onLoad, false);\n        source.addEventListener('abort', onAbort, false);\n        source.addEventListener('error', onError, false);\n\n        // Begin the loading\n        source.load();\n    }\n}\n","import {IMediaContext} from \"../interfaces/IMediaContext\";\nimport Filter from \"../filters/Filter\";\n\n/**\n * The fallback version of WebAudioContext which uses `<audio>` instead of WebAudio API.\n * @class HTMLAudioContext\n * @extends PIXI.util.EventEmitter\n * @memberof PIXI.sound.htmlaudio\n */\nexport default class HTMLAudioContext extends PIXI.utils.EventEmitter implements IMediaContext\n{\n    /**\n     * Current muted status of the context\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#_muted\n     * @type {Boolean}\n     * @private\n     * @default false\n     */\n    private _muted: boolean;\n\n    /**\n     * Current volume from 0 to 1\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#_volume\n     * @type {Number}\n     * @private\n     * @default 1\n     */\n    private _volume: number;\n\n    /**\n     * Current paused status\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#_paused\n     * @type {Boolean}\n     * @private\n     * @default false\n     */\n    private _paused: boolean;\n\n    constructor()\n    {\n        super();\n\n        this._volume = 1;\n        this._muted = false;\n        this._paused = false;\n    }\n\n    /**\n     * Pauses all sounds.\n     * @type {Boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#paused\n     * @default false\n     */\n    public set paused(paused: boolean)\n    {\n        const oldPaused = this._paused;\n\n        this._paused = paused;\n        if (paused !== oldPaused)\n        {\n            /**\n             * Fired when paused state changes\n             * @event PIXI.sound.htmlaudio.HTMLAudioContext#paused\n             * @param {Boolean} paused - Paused state of context\n             * @private\n             */\n            this.emit('paused', paused);\n        }\n    }\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    /**\n     * Sets the muted state.\n     * @type {Boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#muted\n     * @default false\n     */\n    public set muted(muted: boolean)\n    {\n        const oldMuted = this._muted;\n\n        this._muted = muted;\n        if (muted !== oldMuted)\n        {\n            /**\n             * Fired when muted state changes\n             * @event PIXI.sound.htmlaudio.HTMLAudioContext#muted\n             * @param {Boolean} muted - Muted state of context\n             * @private\n             */\n            this.emit('muted', muted);\n        }\n    }\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n\n    /**\n     * Sets the volume from 0 to 1.\n     * @type {Number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#volume\n     * @default 1\n     */\n    public set volume(volume: number)\n    {\n        const oldVolume = this._volume;\n        \n        this._volume = volume;\n        if (volume !== oldVolume)\n        {\n            /**\n             * Fired when volume changes\n             * @event PIXI.sound.htmlaudio.HTMLAudioContext#volume\n             * @param {Boolean} volume - Current context volume\n             * @private\n             */\n            this.emit('volume', volume);\n        }\n    }\n    public get volume(): number\n    {\n        return this._volume;\n    }\n\n    /**\n     * HTML Audio does not support filters, this is non-functional API.\n     * @type {Array<PIXI.sound.filters.Filter>}\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#filters\n     * @default null\n     */\n    public get filters(): Filter[]\n    {\n        // @if DEBUG\n        console.warn('HTML Audio does not support filters');\n        // @endif\n        return null;\n    }\n    public set filters(filters: Filter[])\n    {\n        // @if DEBUG\n        console.warn('HTML Audio does not support filters');\n        // @endif\n    }\n\n    /**\n     * HTML Audio does not support `audioContext`\n     * @type {null}\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#audioContext\n     * @default null\n     * @readonly\n     */\n    public get audioContext(): AudioContext\n    {\n        // @if DEBUG\n        console.warn('HTML Audio does not support audioContext');\n        // @endif\n        return null;\n    }\n\n    /**\n     * Toggles the muted state.\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#toggleMute\n     * @return {Boolean} The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        return this._muted;\n    }\n\n    /**\n     * Toggles the paused state.\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#togglePause\n     * @return {Boolean} The current paused state.\n     */\n    public togglePause(): boolean\n    {\n        this.paused = !this.paused;\n        return this._paused;\n    }\n\n    /**\n     * Destroy and don't use after this\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#destroy\n     */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n    }\n}","import SoundLibrary from \"../SoundLibrary\";\n\n/**\n * Sound middleware installation utilities for PIXI.loaders.Loader\n * @namespace PIXI.sound.loader\n */\nexport default class LoaderMiddleware\n{\n    /**\n     * The collection of valid sound extensions\n     * @name PIXI.sound.loader.EXTENSION\n     * @type {String[]}\n     * @static\n     */\n    static EXTENSIONS: string[] = [\"wav\", \"mp3\", \"ogg\", \"oga\", \"m4a\"];\n\n    /**\n     * @name PIXI.sound.loader.EXTENSION\n     * @type {PIXI.sound.SoundLibrary}\n     * @static\n     */\n    static _sound: SoundLibrary;\n\n    /**\n     * Install the middleware\n     * @method PIXI.sound.loader.install\n     * @param {PIXI.sound.SoundLibrary} sound - Instance of sound library\n     */\n    static install(sound:SoundLibrary)\n    {\n        LoaderMiddleware._sound = sound;\n        LoaderMiddleware.legacy = sound.useLegacy;\n\n        // Globally install middleware on all Loaders\n        PIXI.loaders.Loader.addPixiMiddleware(() => {\n            return LoaderMiddleware.plugin;\n        });\n\n        // Install middleware on the default loader\n        PIXI.loader.use(LoaderMiddleware.plugin);\n    }\n\n    /**\n     * Set the legacy mode\n     * @name PIXI.sound.loader.legacy\n     * @type {Boolean}\n     */\n    static set legacy(legacy:boolean)\n    {\n        // Configure PIXI Loader to handle audio files correctly\n        const Resource = PIXI.loaders.Resource;\n        const exts = LoaderMiddleware.EXTENSIONS;\n\n        // Make sure we support webaudio\n        if (!legacy)\n        {\n            // Load all audio files as ArrayBuffers\n            exts.forEach((ext) => {\n                Resource.setExtensionXhrType(ext, Resource.XHR_RESPONSE_TYPE.BUFFER);\n                Resource.setExtensionLoadType(ext, Resource.LOAD_TYPE.XHR);\n            });\n        }\n        else\n        {\n            // Fall back to loading as <audio> elements\n            exts.forEach((ext) => {\n                Resource.setExtensionXhrType(ext, Resource.XHR_RESPONSE_TYPE.DEFAULT);\n                Resource.setExtensionLoadType(ext, Resource.LOAD_TYPE.AUDIO);\n            });\n        }\n    }\n\n    /**\n     * Actual resource-loader middleware for sound class\n     */\n    private static plugin(resource: PIXI.loaders.Resource, next: () => void): void\n    {\n        if (resource.data && LoaderMiddleware.EXTENSIONS.indexOf(resource.extension) > -1)\n        {\n            (resource as any).sound = LoaderMiddleware._sound.add(resource.name, {\n                loaded: next,\n                preload: true,\n                url: resource.url,\n                source: resource.data,\n            });\n        }\n        else\n        {\n            next();\n        }\n    }\n}\n","import Sound from \"../Sound\";\nimport {CompleteCallback} from \"../Sound\";\nimport {IMediaInstance} from '../interfaces/IMediaInstance';\n\n// Sound sprite data setup\nexport interface SoundSpriteData {\n    start: number;\n    end: number;\n    speed?: number;\n}\n\n// Collection of sound sprites\nexport type SoundSprites = {[id: string]: SoundSprite};\n\n/**\n * Object that represents a single Sound's sprite.\n * @class SoundSprite\n * @memberof PIXI.sound\n * @param {PIXI.sound.Sound} parent The parent sound\n * @param {Object} options Data associated with object.\n * @param {Number} options.start The start time in seconds.\n * @param {Number} options.end The end time in seconds.\n * @param {Number} [options.speed] The optional speed, if not speed, uses\n *        the default speed of the parent.\n */\nexport default class SoundSprite\n{\n    /**\n     * The reference sound\n     * @name PIXI.sound.SoundSprite#parent\n     * @type {PIXI.sound.Sound}\n     * @readonly\n     */\n    public parent: Sound;\n\n    /**\n     * The starting location in seconds.\n     * @name PIXI.sound.SoundSprite#start\n     * @type {Number}\n     * @readonly\n     */\n    public start: number;\n\n    /**\n     * The ending location in seconds\n     * @name PIXI.sound.SoundSprite#end\n     * @type {Number}\n     * @readonly\n     */\n    public end: number;\n\n    /**\n     * The speed override where 1 is 100% speed playback.\n     * @name PIXI.sound.SoundSprite#speed\n     * @type {Number}\n     * @readonly\n     */\n    public speed: number;\n\n    /**\n     * The duration of the sound in seconds.\n     * @name PIXI.sound.SoundSprite#duration\n     * @type {Number}\n     * @readonly\n     */\n    public duration: number;\n\n    /**\n     * Constructor\n     */\n    constructor(parent: Sound, options: SoundSpriteData)\n    {\n        this.parent = parent;\n        Object.assign(this, options);\n        this.duration = this.end - this.start;\n\n        // @if DEBUG\n        console.assert(this.duration > 0, \"End time must be after start time\");\n        // @endif\n    }\n\n    /**\n     * Play the sound sprite.\n     * @method PIXI.sound.SoundSprite#play\n     * @param {PIXI.sound.Sound~completeCallback} [complete] Function call when complete\n     * @return {PIXI.sound.SoundInstance|Promise<PIXI.sound.SoundInstance>} Sound instance being played.\n     */\n    public play(complete?: CompleteCallback): IMediaInstance|Promise<IMediaInstance>\n    {\n        return this.parent.play(Object.assign({\n            complete,\n            speed: this.speed || this.parent.speed,\n            end: this.end,\n            start: this.start,\n        }));\n    }\n\n    /**\n     * Destroy and don't use after this\n     * @method PIXI.sound.SoundSprite#destroy\n     */\n    public destroy(): void\n    {\n        this.parent = null;\n    }\n}\n","import WebAudioMedia from \"./WebAudioMedia\";\nimport {IMediaInstance} from \"../interfaces/IMediaInstance\";\n\nlet id = 0;\n\n/**\n * A single play instance that handles the AudioBufferSourceNode.\n * @class WebAudioInstance\n * @memberof PIXI.sound.webaudio\n * @param {SoundNodes} source Reference to the SoundNodes.\n */\nexport default class WebAudioInstance extends PIXI.utils.EventEmitter implements IMediaInstance\n{\n    /**\n     * The current unique ID for this instance.\n     * @name PIXI.sound.webaudio.WebAudioInstance#id\n     * @readonly\n     */\n    public id: number;\n\n    /**\n     * The source Sound.\n     * @type {PIXI.sound.webaudio.WebAudioMedia}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_media\n     * @private\n     */\n    private _media: WebAudioMedia;\n\n    /**\n     * true if paused.\n     * @type {Boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_paused\n     * @private\n     */\n    private _paused: boolean;\n\n    /**\n     * Last update frame number.\n     * @type {Number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_lastUpdate\n     * @private\n     */\n    private _lastUpdate: number;\n\n    /**\n     * The total number of seconds elapsed in playback.\n     * @type {Number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_elapsed\n     * @private\n     */\n    private _elapsed: number;\n\n    /**\n     * The number of time in seconds to fade in.\n     * @type {Number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_fadeIn\n     * @private\n     */\n    private _fadeIn: number;\n\n    /**\n     * The number of time in seconds to fade out.\n     * @type {Number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_fadeOut\n     * @private\n     */\n    private _fadeOut: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {Number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_speed\n     * @private\n     */\n    private _speed: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {Number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_end\n     * @private\n     */\n    private _end: number;\n\n    /**\n     * `true` if should be looping.\n     * @type {Boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_loop\n     * @private\n     */\n    private _loop: boolean;\n\n    /**\n     * Length of the sound in seconds.\n     * @type {Number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_duration\n     * @private\n     */\n    private _duration: number;\n\n    /**\n     * The progress of the sound from 0 to 1.\n     * @type {Number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_progress\n     * @private\n     */\n    private _progress: number;\n\n    /**\n     * Callback for update listener\n     * @type {EventListener}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_updateListener\n     * @private\n     */   \n    private _updateListener: EventListener;\n\n    /**\n     * Audio buffer source clone from Sound object.\n     * @type {AudioBufferSourceNode}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_source\n     * @private\n     */\n    private _source: AudioBufferSourceNode;\n\n    constructor(media: WebAudioMedia)\n    {\n        super();\n\n        this.id = id++;\n        this._media = null;\n        this._paused = false;\n        this._elapsed = 0;\n        this._updateListener = this._update.bind(this) as EventListener;\n\n        // Initialize\n        this.init(media);\n    }\n\n    /**\n     * Stops the instance, don't use after this.\n     * @method PIXI.sound.webaudio.WebAudioInstance#stop\n     */\n    public stop(): void\n    {\n        if (this._source)\n        {\n            this._internalStop();\n\n            /**\n             * The sound is stopped. Don't use after this is called.\n             * @event PIXI.sound.webaudio.WebAudioInstance#stop\n             */\n            this.emit(\"stop\");\n        }\n    }\n\n    /**\n     * Plays the sound.\n     * @method PIXI.sound.webaudio.WebAudioInstance#play\n     * @param {Number} [start=0] The position to start playing, in seconds.\n     * @param {Number} [end] The ending position in seconds.\n     * @param {Number} [speed] Override the default speed.\n     * @param {Boolean} [loop] Override the default loop.\n     * @param {Number} [fadeIn] Time to fadein volume.\n     * @param {Number} [fadeOut] Time to fadeout volume.\n     */\n    public play(start: number, end: number, speed: number, loop: boolean, fadeIn: number, fadeOut: number): void\n    {\n        // @if DEBUG\n        if (end)\n        {\n            console.assert(end > start, \"End time is before start time\");\n        }\n        // @endif\n        this._paused = false;\n        this._source = this._media.nodes.cloneBufferSource();\n        if (speed !== undefined)\n        {\n            this._source.playbackRate.value = speed;\n        }\n        this._speed = this._source.playbackRate.value;\n        if (loop !== undefined)\n        {\n            this._loop = this._source.loop = !!loop;\n        }\n        // WebAudio doesn't support looping when a duration is set\n        // we'll set this just for the heck of it\n        if (this._loop && end !== undefined)\n        {\n            // @if DEBUG\n            console.warn('Looping not support when specifying an \"end\" time');\n            // @endif\n            this._loop = this._source.loop = false;\n        }\n        this._end = end;\n\n        const duration: number = this._source.buffer.duration;\n\n        fadeIn = this._toSec(fadeIn);\n\n        // Clamp fadeIn to the duration\n        if (fadeIn > duration)\n        {\n            fadeIn = duration;\n        }\n\n        // Cannot fade out for looping sounds\n        if (!this._loop)\n        {\n            fadeOut = this._toSec(fadeOut);\n\n            // Clamp fadeOut to the duration + fadeIn\n            if (fadeOut > duration - fadeIn)\n            {\n                fadeOut = duration - fadeIn;\n            }\n        }\n\n        this._duration = duration;\n        this._fadeIn = fadeIn;\n        this._fadeOut = fadeOut;\n        this._lastUpdate = this._now();\n        this._elapsed = start;\n        this._source.onended = this._onComplete.bind(this);\n        \n        if (end)\n        {\n            this._source.start(0, start, end - start);\n        }\n        else\n        {\n            this._source.start(0, start);\n        }\n\n        /**\n         * The sound is started.\n         * @event PIXI.sound.webaudio.WebAudioInstance#start\n         */\n        this.emit(\"start\");\n\n        // Do an update for the initial progress\n        this._update(true);\n\n        // Start handling internal ticks\n        this._enabled = true;\n    }\n\n    /**\n     * Utility to convert time in millseconds or seconds\n     * @method PIXI.sound.webaudio.WebAudioInstance#_toSec\n     * @private\n     * @param {Number} [time] Time in either ms or sec\n     * @return {Number} Time in seconds\n     */\n    private _toSec(time?: number): number\n    {\n        if (time > 10)\n        {\n            time /= 1000;\n        }\n        return time || 0;\n    }\n\n    /**\n     * Start the update progress.\n     * @name PIXI.sound.webaudio.WebAudioInstance#_enabled\n     * @type {Boolean}\n     * @private\n     */\n    private set _enabled(enabled: boolean)\n    {\n        const script = this._media.nodes.script;\n\n        script.removeEventListener('audioprocess', this._updateListener);\n\n        if (enabled)\n        {\n            script.addEventListener('audioprocess', this._updateListener);\n        }\n    }\n\n    /**\n     * The current playback progress from 0 to 1.\n     * @type {Number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#progress\n     */\n    public get progress(): number\n    {\n        return this._progress;\n    }\n\n    /**\n     * Pauses the sound.\n     * @type {Boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#paused\n     */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    public set paused(paused: boolean)\n    {\n        if (paused !== this._paused)\n        {\n            this._paused = paused;\n\n            if (paused)\n            {\n                // pause the sounds\n                this._internalStop();\n\n                /**\n                 * The sound is paused.\n                 * @event PIXI.sound.webaudio.WebAudioInstance#paused\n                 */\n                this.emit(\"paused\");\n            }\n            else\n            {\n                /**\n                 * The sound is unpaused.\n                 * @event PIXI.sound.webaudio.WebAudioInstance#resumed\n                 */\n                this.emit(\"resumed\");\n\n                // resume the playing with offset\n                this.play(\n                    this._elapsed % this._duration,\n                    this._end,\n                    this._speed,\n                    this._loop,\n                    this._fadeIn,\n                    this._fadeOut,\n                );\n            }\n\n            /**\n             * The sound is paused or unpaused.\n             * @event PIXI.sound.webaudio.WebAudioInstance#pause\n             * @property {Boolean} paused If the instance was paused or not.\n             */\n            this.emit(\"pause\", paused);\n        }\n    }\n\n    /**\n     * Don't use after this.\n     * @method PIXI.sound.webaudio.WebAudioInstance#destroy\n     */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n        this._internalStop();\n        this._source = null;\n        this._speed = 0;\n        this._end = 0;\n        this._media = null;\n        this._elapsed = 0;\n        this._duration = 0;\n        this._loop = false;\n        this._fadeIn = 0;\n        this._fadeOut = 0;\n        this._paused = false;\n    }\n\n    /**\n     * To string method for instance.\n     * @method PIXI.sound.webaudio.WebAudioInstance#toString\n     * @return {String} The string representation of instance.\n     * @private\n     */\n    public toString(): string\n    {\n        return \"[SoundInstance id=\" + this.id + \"]\";\n    }\n\n    /**\n     * Get the current time in seconds.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_now\n     * @private\n     * @return {Number} Seconds since start of context\n     */\n    private _now(): number\n    {\n        return this._media.context.audioContext.currentTime;\n    }\n\n    /**\n     * Internal update the progress.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_update\n     * @private\n     */\n    private _update(force: boolean = false): void\n    {\n        if (this._source)\n        {\n            const now: number = this._now();\n            const delta: number = now - this._lastUpdate;\n\n            if (delta > 0 || force)\n            {\n                this._elapsed += delta;\n                this._lastUpdate = now;\n                const duration: number = this._duration;\n                const progress: number = ((this._elapsed * this._speed) % duration) / duration;\n\n                if (this._fadeIn || this._fadeOut)\n                {\n                    const position: number = progress * duration;\n                    const gain = this._media.nodes.gain.gain;\n                    const maxVolume = this._media.parent.volume;\n\n                    if (this._fadeIn)\n                    {\n                        if (position <= this._fadeIn && progress < 1)\n                        {\n                            // Manipulate the gain node directly\n                            // so we can maintain the starting volume\n                            gain.value = maxVolume * (position / this._fadeIn);\n                        }\n                        else\n                        {\n                            gain.value = maxVolume;\n                            this._fadeIn = 0;\n                        }\n                    }\n\n                    if (this._fadeOut && position >= duration - this._fadeOut)\n                    {\n                        const percent: number = (duration - position) / this._fadeOut;\n                        gain.value = maxVolume * percent;\n                    }\n                }\n\n                // Update the progress\n                this._progress = progress;\n\n                /**\n                 * The sound progress is updated.\n                 * @event PIXI.sound.webaudio.WebAudioInstance#progress\n                 * @property {Number} progress Amount progressed from 0 to 1\n                 * @property {Number} duration The total playback in seconds\n                 */\n                this.emit(\"progress\", this._progress, duration);\n            }\n        }\n    }\n\n    /**\n     * Initializes the instance.\n     * @method PIXI.sound.webaudio.WebAudioInstance#init\n     */\n    public init(media: WebAudioMedia): void\n    {\n        this._media = media;\n    }\n\n    /**\n     * Stops the instance.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_internalStop\n     * @private\n     */\n    private _internalStop(): void\n    {\n        if (this._source)\n        {\n            this._enabled = false;\n            this._source.onended = null;\n            this._source.stop();\n            this._source = null;\n\n            // Reset the volume\n            this._media.volume = this._media.parent.volume;\n        }\n    }\n\n    /**\n     * Callback when completed.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_onComplete\n     * @private\n     */\n    private _onComplete(): void\n    {\n        if (this._source)\n        {\n            this._enabled = false;\n            this._source.onended = null;\n        }\n        this._source = null;\n        this._progress = 1;\n        this.emit(\"progress\", 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event PIXI.sound.webaudio.WebAudioInstance#end\n         */\n        this.emit(\"end\", this);\n    }\n}\n","import Filterable from \"../Filterable\";\nimport Filter from \"../filters/Filter\";\nimport WebAudioContext from \"./WebAudioContext\";\n\n/**\n * @class WebAudioNodes\n * @extends PIXI.sound.Filterable\n * @private\n * @memberof PIXI.sound.webaudio\n * @param {PIXI.sound.webaudio.WebAudioContext} audioContext The audio context.\n */\nexport default class WebAudioNodes extends Filterable\n{\n    /**\n     * The buffer size for script processor\n     * @name PIXI.sound.SoundNodes.BUFFER_SIZE\n     * @type {Number}\n     * @default 256\n     */\n    public static BUFFER_SIZE: number = 256;\n\n    /**\n     * Get the buffer source node\n     * @name PIXI.sound.SoundNodes#bufferSource\n     * @type {AudioBufferSourceNode}\n     * @readonly\n     */\n    public bufferSource: AudioBufferSourceNode;\n\n    /**\n     * Get the script processor node.\n     * @name PIXI.sound.SoundNodes#script\n     * @type {ScriptProcessorNode}\n     * @readonly\n     */\n    public script: ScriptProcessorNode;\n\n    /**\n     * Get the gain node\n     * @name PIXI.sound.SoundNodes#gain\n     * @type {GainNode}\n     * @readonly\n     */\n    public gain: GainNode;\n\n    /**\n     * Get the analyser node\n     * @name PIXI.sound.SoundNodes#analyser\n     * @type {AnalyserNode}\n     * @readonly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * Reference to the SoundContext\n     * @name PIXI.sound.SoundNodes#context\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @readonly\n     */\n    public context: WebAudioContext;\n\n    constructor(context: WebAudioContext)\n    {\n        const audioContext: AudioContext = context.audioContext;\n\n        const bufferSource: AudioBufferSourceNode = audioContext.createBufferSource();\n        const script: ScriptProcessorNode = audioContext.createScriptProcessor(WebAudioNodes.BUFFER_SIZE);\n        const gain: GainNode = audioContext.createGain();\n        const analyser: AnalyserNode = audioContext.createAnalyser();\n\n        bufferSource.connect(analyser);\n        analyser.connect(gain);\n        gain.connect(context.destination);\n        script.connect(context.destination);\n\n        super(analyser, gain);\n\n        this.context = context;\n        this.bufferSource = bufferSource;\n        this.script = script;\n        this.gain = gain;\n        this.analyser = analyser;\n    }\n\n    /**\n     * Cleans up.\n     * @method PIXI.sound.SoundNodes#destroy\n     */\n    public destroy(): void\n    {\n        super.destroy();\n\n        this.bufferSource.disconnect();\n        this.script.disconnect();\n        this.gain.disconnect();\n        this.analyser.disconnect();\n\n        this.bufferSource = null;\n        this.script = null;\n        this.gain = null;\n        this.analyser = null;\n\n        this.context = null;\n    }\n\n    /**\n     * Clones the bufferSource. Used just before playing a sound.\n     * @method PIXI.sound.SoundNodes#cloneBufferSource\n     * @returns {AudioBufferSourceNode} The clone AudioBufferSourceNode.\n     */\n    public cloneBufferSource(): AudioBufferSourceNode\n    {\n        const orig: AudioBufferSourceNode = this.bufferSource;\n        const clone: AudioBufferSourceNode = this.context.audioContext.createBufferSource();\n        clone.buffer = orig.buffer;\n        clone.playbackRate.value = orig.playbackRate.value;\n        clone.loop = orig.loop;\n        clone.connect(this.destination);\n        return clone;\n    }\n}\n","import * as path from \"path\";\nimport Filter from \"../filters/Filter\";\nimport WebAudioContext from \"./WebAudioContext\";\nimport WebAudioInstance from \"./WebAudioInstance\";\nimport WebAudioNodes from \"./WebAudioNodes\";\nimport SoundSprite from \"../sprites/SoundSprite\";\nimport {SoundSpriteData, SoundSprites} from \"../sprites/SoundSprite\";\nimport Sound from \"../Sound\";\nimport {IMedia} from \"../interfaces/IMedia\";\nimport {Options, PlayOptions, LoadedCallback, CompleteCallback} from \"../Sound\";\n\n/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n *\n * @class WebAudioMedia\n * @memberof PIXI.sound.webaudio\n * @param {PIXI.sound.Sound} parent - Instance of parent Sound container\n */\nexport default class WebAudioMedia implements IMedia\n{\n    /**\n     * Reference to the parent Sound container.\n     * @name PIXI.sound.webaudio.WebAudioMedia#parent\n     * @type {PIXI.sound.Sound}\n     * @readonly\n     */\n    public parent: Sound;\n\n    /**\n     * The file buffer to load.\n     * @name PIXI.sound.webaudio.WebAudioMedia#source\n     * @type {ArrayBuffer}\n     * @readonly\n     */\n    public source: ArrayBuffer;\n\n    /**\n     * `true` to use XMLHttpRequest object to load.\n     * Default is to use NodeJS's fs module to read the sound.\n     * @name PIXI.sound.webaudio.WebAudioMedia#useXHR\n     * @type {Boolean}\n     * @default false\n     */\n    public useXHR: boolean;\n\n    /**\n     * Instance of the chain builder.\n     * @name PIXI.sound.webaudio.WebAudioMedia#_nodes\n     * @type {PIXI.sound.webaudio.WebAudioNodes}\n     * @private\n     */\n    private _nodes: WebAudioNodes;\n\n    /**\n     * Instance of the source node.\n     * @name PIXI.sound.webaudio.WebAudioMedia#_source\n     * @type {AudioBufferSourceNode}\n     * @private\n     */\n    private _source: AudioBufferSourceNode;\n\n    init(parent:Sound): void\n    {\n        this.parent = parent;\n        this._nodes = new WebAudioNodes(this.context);\n        this._source = this._nodes.bufferSource;\n        this.source = parent.options.source as ArrayBuffer;\n        this.useXHR = parent.options.useXHR;\n    }\n\n    /**\n     * Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound.\n     * @private\n     * @method PIXI.sound.webaudio.WebAudioMedia#destroy\n     */\n    public destroy(): void\n    {\n        this.parent = null;\n        this._nodes.destroy();\n        this._nodes = null;\n        this._source = null;\n        this.source = null;\n    }\n\n    // Implement create\n    public create(): WebAudioInstance\n    {\n        return new WebAudioInstance(this);\n    }\n\n    // Implement context\n    public get context(): WebAudioContext\n    {\n        return this.parent.context as WebAudioContext;\n    }\n    \n    // Implement isPlayable\n    public get isPlayable(): boolean\n    {\n        return !!this._source && !!this._source.buffer;\n    }\n\n    // Implements volume\n    public set volume(volume: number)\n    {\n        this._nodes.gain.gain.value = volume;\n    }\n\n    // Implements looping\n    public set loop(loop: boolean)\n    {\n        this._source.loop = loop;\n    }\n\n    // Implements speed\n    public set speed(value: number)\n    {\n        this._source.playbackRate.value = value;\n    }\n    \n    // Implement filters\n    public get filters(): Filter[]\n    {\n        return this._nodes.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this._nodes.filters = filters;\n    }\n\n    // Implements duration\n    public get duration(): number\n    {\n        // @if DEBUG\n        console.assert(this.isPlayable, \"Sound not yet playable, no duration\");\n        // @endif\n        return this._source.buffer.duration;\n    }\n\n    /**\n     * Gets and sets the buffer.\n     * @name PIXI.sound.webaudio.WebAudioMedia#buffer\n     * @type {AudioBuffer}\n     */\n    public get buffer(): AudioBuffer\n    {\n        return this._source.buffer;\n    }\n    public set buffer(buffer: AudioBuffer)\n    {\n        this._source.buffer = buffer;\n    }\n\n    /**\n     * Get the current chained nodes object\n     * @private\n     * @name PIXI.sound.webaudio.WebAudioMedia#nodes\n     * @type {PIXI.sound.webaudio.WebAudioNodes}\n     */\n    public get nodes(): WebAudioNodes\n    {\n        return this._nodes;\n    }\n\n    // Implements load\n    public load(callback?: LoadedCallback): void\n    {\n        // Load from the file path\n        if (this.parent.url)\n        {\n            this.useXHR ? this._loadUrl(callback) : this._loadPath(callback);\n        }\n        // Load from the arraybuffer, incase it was loaded outside\n        else if (this.source)\n        {\n            this._decode(this.source, callback);\n        }\n        else if (callback)\n        {\n            callback(new Error(\"sound.url or sound.source must be set\"));\n        }\n        else\n        {\n            console.error(\"sound.url or sound.source must be set\");\n        }\n    }\n\n    /**\n     * Loads a sound using XHMLHttpRequest object.\n     * @method PIXI.sound.webaudio.WebAudioMedia#_loadUrl\n     * @private\n     */\n    private _loadUrl(callback?: LoadedCallback): void\n    {\n        const request = new XMLHttpRequest();\n        const url: string = this.parent.url;\n        request.open(\"GET\", url, true);\n        request.responseType = \"arraybuffer\";\n\n        // Decode asynchronously\n        request.onload = () => {\n            this.source = request.response as ArrayBuffer;\n            this._decode(request.response, callback);\n        };\n\n        // actually start the request\n        request.send();\n    }\n\n    /**\n     * Loads using the file system (NodeJS's fs module).\n     * @method PIXI.sound.webaudio.WebAudioMedia#_loadPath\n     * @private\n     */\n    private _loadPath(callback?: LoadedCallback)\n    {\n        const fs = require(\"fs\");\n        const url: string = this.parent.url;\n        fs.readFile(url, (err: Error, data: Buffer) => {\n            if (err)\n            {\n                // @if DEBUG\n                console.error(err);\n                // @endif\n                if (callback)\n                {\n                    callback(new Error(`File not found ${this.parent.url}`));\n                }\n                return;\n            }\n            const arrayBuffer = new ArrayBuffer(data.length);\n            const view = new Uint8Array(arrayBuffer);\n            for (let i = 0; i < data.length; ++i)\n            {\n                view[i] = data[i];\n            }\n            this.source = arrayBuffer;\n            this._decode(arrayBuffer, callback);\n        });\n    }\n\n    /**\n     * Decodes the array buffer.\n     * @method PIXI.sound.webaudio.WebAudioMedia#decode\n     * @param {ArrayBuffer} arrayBuffer From load.\n     * @private\n     */\n    private _decode(arrayBuffer: ArrayBuffer, callback?: LoadedCallback): void\n    {\n        const context = this.parent.context as WebAudioContext;\n        context.decode(arrayBuffer, (err: Error, buffer: AudioBuffer) =>\n        {\n            if (err)\n            {\n                if (callback)\n                {\n                    callback(err);\n                }\n            }\n            else\n            {\n                this.parent.isLoaded = true;\n                this.buffer = buffer;\n                const instance = this.parent.autoPlayStart();\n                if (callback)\n                {\n                    callback(null, this.parent, instance);\n                }\n            }\n        });\n    }\n}\n","import Filter from \"./filters/Filter\";\nimport HTMLAudioMedia from \"./htmlaudio/HTMLAudioMedia\";\nimport {IMedia} from \"./interfaces/IMedia\";\nimport {IMediaContext} from \"./interfaces/IMediaContext\";\nimport {IMediaInstance} from \"./interfaces/IMediaInstance\";\nimport SoundLibrary from \"./SoundLibrary\";\nimport SoundSprite from \"./sprites/SoundSprite\";\nimport {SoundSpriteData, SoundSprites} from \"./sprites/SoundSprite\";\nimport WebAudioMedia from \"./webaudio/WebAudioMedia\";\n\n// Constructor options\nexport interface Options {\n    autoPlay?: boolean;\n    preaload?: boolean;\n    singleInstance?: boolean;\n    volume?: number;\n    speed?: number;\n    complete?: CompleteCallback;\n    loaded?: LoadedCallback;\n    preload?: boolean;\n    loop?: boolean;\n    url?: string;\n    source?: ArrayBuffer|HTMLAudioElement;\n    useXHR?: boolean;\n    sprites?: {[id: string]: SoundSpriteData};\n}\n\n// Interface for play options\nexport interface PlayOptions {\n    start?: number;\n    end?: number;\n    speed?: number;\n    loop?: boolean;\n    fadeIn?: number;\n    fadeOut?: number;\n    sprite?: string;\n    complete?: CompleteCallback;\n    loaded?: LoadedCallback;\n}\n\n/**\n * Callback when sound is loaded.\n * @callback PIXI.sound.Sound~loadedCallback\n * @param {Error} err The callback error.\n * @param {PIXI.sound.Sound} sound The instance of new sound.\n * @param {PIXI.sound.SoundInstance} instance The instance of auto-played sound.\n */\nexport declare type LoadedCallback = (err: Error, sound?: Sound, instance?: IMediaInstance) => void;\n\n/**\n * Callback when sound is completed.\n * @callback PIXI.sound.Sound~completeCallback\n * @param {PIXI.sound.Sound} sound The instance of sound.\n */\nexport declare type CompleteCallback = (sound: Sound) => void;\n\n/**\n * Abstract base class for LegacySound and Sound.\n * @class Sound\n * @memberof PIXI.sound\n */\nexport default class Sound\n{\n    /**\n     * Pool of instances\n     * @name PIXI.sound.Sound#_pool\n     * @type {Array<IMediaInstance>}\n     * @private\n     */\n    private static _pool: IMediaInstance[] = [];\n\n    /**\n     * `true` if the buffer is loaded.\n     * @name PIXI.sound.Sound#isLoaded\n     * @type {Boolean}\n     * @default false\n     */\n    public isLoaded: boolean;\n\n    /**\n     * `true` if the sound is currently being played.\n     * @name PIXI.sound.Sound#isPlaying\n     * @type {Boolean}\n     * @default false\n     * @readonly\n     */\n    public isPlaying: boolean;\n\n    /**\n     * true to start playing immediate after load.\n     * @name PIXI.sound.Sound#autoPlay\n     * @type {Boolean}\n     * @default false\n     * @readonly\n     */\n    public autoPlay: boolean;\n\n    /**\n     * `true` to disallow playing multiple layered instances at once.\n     * @name PIXI.sound.Sound#singleInstance\n     * @type {Boolean}\n     * @default false\n     */\n    public singleInstance: boolean;\n\n    /**\n     * `true` to immediately start preloading.\n     * @name PIXI.sound.Sound#preload\n     * @type {Boolean}\n     * @default false\n     * @readonly\n     */\n    public preload: boolean;\n\n    /**\n     * The file source to load.\n     * @name PIXI.sound.Sound#url\n     * @type {String}\n     * @readonly\n     */\n    public url: string;\n\n    /**\n     * The constructor options.\n     * @name PIXI.sound.Sound#options\n     * @type {Object}\n     * @readonly\n     */\n    public options: Options;\n\n    /**\n     * The audio source\n     * @name PIXI.sound.Sound#media\n     * @type {PIXI.sound.IMedia}\n     * @private\n     */\n    public media: IMedia;\n\n    /**\n     * The collection of instances being played.\n     * @name PIXI.sound.Sound#_instances\n     * @type {Array<IMediaInstance>}\n     * @private\n     */\n    private _instances: IMediaInstance[];\n\n    /**\n     * Reference to the sound context.\n     * @name PIXI.sound.Sound#_sprites\n     * @type {SoundContext}\n     * @private\n     */\n    private _sprites: SoundSprites;\n\n    /**\n     * The options when auto-playing.\n     * @name PIXI.sound.Sound#_autoPlayOptions\n     * @type {PlayOptions}\n     * @private\n     */\n    private _autoPlayOptions: PlayOptions;\n\n    /**\n     * The internal volume.\n     * @name PIXI.sound.Sound#_volume\n     * @type {Number}\n     * @private\n     */\n    private _volume: number;\n\n    /**\n     * The internal volume.\n     * @name PIXI.sound.Sound#_loop\n     * @type {Boolean}\n     * @private\n     */\n    private _loop: boolean;\n\n    /**\n     * The internal playbackRate\n     * @name PIXI.sound.Sound#_speed\n     * @type {Number}\n     * @private\n     */\n    private _speed: number;\n\n    /**\n     * Create a new sound instance from source.\n     * @method PIXI.sound.Sound.from\n     * @param {ArrayBuffer|String|Object|HTMLAudioElement} options Either the path or url to the source file.\n     *        or the object of options to use.\n     * @param {String} [options.url] If `options` is an object, the source of file.\n     * @param {HTMLAudioElement|ArrayBuffer} [options.source] The source, if already preloaded.\n     * @param {Boolean} [options.autoPlay=false] true to play after loading.\n     * @param {Boolean} [options.preload=false] true to immediately start preloading.\n     * @param {Boolean} [options.singleInstance=false] `true` to disallow playing multiple layered instances at once.\n     * @param {Number} [options.volume=1] The amount of volume 1 = 100%.\n     * @param {Boolean} [options.useXHR=true] true to use XMLHttpRequest to load the sound. Default is false,\n     *        loaded with NodeJS's `fs` module.\n     * @param {Number} [options.speed=1] The playback rate where 1 is 100% speed.\n     * @param {Object} [options.sprites] The map of sprite data. Where a sprite is an object\n     *        with a `start` and `end`, which are the times in seconds. Optionally, can include\n     *        a `speed` amount where 1 is 100% speed.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete=null] Global complete callback\n     *        when play is finished.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\n     * @param {Boolean} [options.loop=false] true to loop the audio playback.\n     * @return {PIXI.sound.Sound} Created sound instance.\n     */\n    public static from(source: string|Options|ArrayBuffer|HTMLAudioElement): Sound\n    {\n        let options: Options = {};\n\n        if (typeof source === \"string\")\n        {\n            options.url = source as string;\n        }\n        else if (source instanceof ArrayBuffer || source instanceof HTMLAudioElement)\n        {\n            options.source = source;\n        }\n        else\n        {\n            options = source;\n        }\n\n        // Default settings\n        options = Object.freeze(Object.assign({\n            autoPlay: false,\n            singleInstance: false,\n            url: null,\n            source: null,\n            preload: false,\n            volume: 1,\n            speed: 1,\n            complete: null,\n            loaded: null,\n            loop: false,\n            useXHR: true,\n        }, options));\n\n        const media: IMedia = SoundLibrary.instance.useLegacy ?\n            new HTMLAudioMedia() :\n            new WebAudioMedia();\n\n        return new Sound(media, options);\n    }\n\n    /**\n     * Constructor, use `PIXI.sound.Sound.from`\n     * @private\n     */\n    constructor(media: IMedia, options: Options)\n    {\n        this.media = media;\n        this.options = options;\n        this._instances = [];\n        this._sprites = {};\n\n        this.media.init(this);\n\n        const complete = options.complete;\n        this._autoPlayOptions = complete ? { complete } : null;\n        this.isLoaded = false;\n        this.isPlaying = false;\n        this.autoPlay = options.autoPlay;\n        this.singleInstance = options.singleInstance;\n        this.preload = options.preload || this.autoPlay;\n        this.url = options.url;\n        this.speed = options.speed;\n        this.volume = options.volume;\n        this.loop = options.loop;\n\n        if (options.sprites)\n        {\n            this.addSprites(options.sprites);\n        }\n\n        if (this.preload)\n        {\n            this._preload(options.loaded);\n        }\n    }\n\n    /**\n     * Instance of the media context\n     * @name PIXI.sound.Sound#context\n     * @type {PIXI.sound.IMediaContext}\n     * @readonly\n     */\n    public get context(): IMediaContext\n    {\n        return SoundLibrary.instance.context;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @method PIXI.sound.Sound#pause\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public pause(): Sound\n    {\n        this.paused = true;\n        this.isPlaying = false;\n        return this;\n    }\n\n    /**\n     * Resuming all the instances of this sound from playing\n     * @method PIXI.sound.Sound#resume\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public resume(): Sound\n    {\n        this.paused = false;\n        this.isPlaying = this._instances.length > 0;\n        return this;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @name PIXI.sound.Sound#paused\n     * @type {Boolean}\n     */\n    private set paused(paused: boolean)\n    {\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._instances[i].paused = paused;\n        }\n    }\n\n    /**\n     * The playback rate\n     * @name PIXI.sound.Sound#speed\n     * @type {Number}\n     */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = this.media.speed = speed;\n    }\n\n    /**\n     * Set the filters. Only supported with WebAudio.\n     * @name PIXI.sound.Sound#filters\n     * @type {Array<PIXI.sound.filters.Filter>}\n     */\n    public get filters(): Filter[]\n    {\n        return this.media.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this.media.filters = filters;\n    }\n\n    /**\n     * Add a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @method PIXI.sound.Sound#addSprites\n     * @param {String} alias The unique name of the sound sprite.\n     * @param {object} data Either completed function or play options.\n     * @param {Number} data.start Time when to play the sound in seconds.\n     * @param {Number} data.end Time to end playing in seconds.\n     * @param {Number} [data.speed] Override default speed, default to the Sound's speed setting.\n     * @return {PIXI.sound.SoundSprite} Sound sprite result.\n     */\n    public addSprites(alias: string, data: SoundSpriteData): SoundSprite;\n\n    /**\n     * Convenience method to add more than one sprite add a time.\n     * @method PIXI.sound.Sound#addSprites\n     * @param {Object} data Map of sounds to add where the key is the alias,\n     *        and the data are configuration options, see {@PIXI.sound.Sound#addSprite} for info on data.\n     * @return {Object} The map of sound sprites added.\n     */\n    public addSprites(sprites: {[id: string]: SoundSpriteData}): SoundSprites;\n\n    // Actual implementation\n    public addSprites(source: string|{[id: string]: SoundSpriteData}, data?: SoundSpriteData): SoundSprite|SoundSprites\n    {\n        if (typeof source === \"object\")\n        {\n            const results: SoundSprites = {};\n            for (const alias in source)\n            {\n                results[alias] = this.addSprites(alias, source[alias]);\n            }\n            return results;\n        }\n        else if (typeof source === \"string\")\n        {\n            console.assert(!this._sprites[source], `Alias ${source} is already taken`);\n            const sprite = new SoundSprite(this, data);\n            this._sprites[source] = sprite;\n            return sprite;\n        }\n    }\n\n    /**\n     * Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound.\n     * @method PIXI.sound.Sound#destroy\n     */\n    public destroy(): void\n    {\n        this._removeInstances();\n        this.removeSprites();\n        this.media.destroy();\n        this.media = null;\n        this._sprites = null;\n        this._instances = null;\n    }\n\n    /**\n     * Remove all sound sprites.\n     * @method PIXI.sound.Sound#removeSprites\n     * @return {PIXI.sound.Sound} Sound instance for chaining.\n     */\n\n    /**\n     * Remove a sound sprite.\n     * @method PIXI.sound.Sound#removeSprites\n     * @param {String} alias The unique name of the sound sprite.\n     * @return {PIXI.sound.Sound} Sound instance for chaining.\n     */\n    public removeSprites(alias?: string): Sound\n    {\n        if (!alias)\n        {\n            for (const name in this._sprites)\n            {\n                this.removeSprites(name);\n            }\n        }\n        else\n        {\n            const sprite: SoundSprite = this._sprites[alias];\n\n            if (sprite !== undefined)\n            {\n                sprite.destroy();\n                delete this._sprites[alias];\n            }\n        }\n        return this;\n    }\n\n    /**\n     * If the current sound is playable (loaded).\n     * @name PIXI.sound.Sound#isPlayable\n     * @type {Boolean}\n     * @readonly\n     */\n    public get isPlayable(): boolean\n    {\n        return this.isLoaded && this.media && this.media.isPlayable;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @method PIXI.sound.Sound#stop\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public stop(): Sound\n    {\n        if (!this.isPlayable)\n        {\n            this.autoPlay = false;\n            this._autoPlayOptions = null;\n            return this;\n        }\n        this.isPlaying = false;\n\n        // Go in reverse order so we don't skip items\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._instances[i].stop();\n        }\n        return this;\n    }\n\n    /**\n     * Play a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @method PIXI.sound.Sound#play\n     * @param {String} alias The unique name of the sound sprite.\n     * @param {object} data Either completed function or play options.\n     * @param {Number} data.start Time when to play the sound in seconds.\n     * @param {Number} data.end Time to end playing in seconds.\n     * @param {Number} [data.speed] Override default speed, default to the Sound's speed setting.\n     * @param {PIXI.sound.Sound~completeCallback} [callback] Callback when completed.\n     * @return {PIXI.sound.SoundInstance|Promise<PIXI.sound.SoundInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(alias: string, callback?: CompleteCallback): IMediaInstance|Promise<IMediaInstance>;\n\n    /**\n     * Plays the sound.\n     * @method PIXI.sound.Sound#play\n     * @param {PIXI.sound.Sound~completeCallback|object} options Either completed function or play options.\n     * @param {Number} [options.start=0] Time when to play the sound in seconds.\n     * @param {Number} [options.end] Time to end playing in seconds.\n     * @param {String} [options.sprite] Play a named sprite. Will override end, start and speed options.\n     * @param {Number} [options.fadeIn] Amount of time to fade in volume. If less than 10,\n     *        considered seconds or else milliseconds.\n     * @param {Number} [options.fadeOut] Amount of time to fade out volume. If less than 10,\n     *        considered seconds or else milliseconds.\n     * @param {Number} [options.speed] Override default speed, default to the Sound's speed setting.\n     * @param {Boolean} [options.loop] Override default loop, default to the Sound's loop setting.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete] Callback when complete.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded] If the sound isn't already preloaded, callback when\n     *        the audio has completely finished loading and decoded.\n     * @return {PIXI.sound.SoundInstance|Promise<PIXI.sound.SoundInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(source?: string|PlayOptions|CompleteCallback,\n                callback?: CompleteCallback): IMediaInstance|Promise<IMediaInstance>;\n\n    // Overloaded function\n    public play(source?: any, complete?: CompleteCallback): IMediaInstance|Promise<IMediaInstance>\n    {\n        let options: PlayOptions;\n\n        if (typeof source === \"string\")\n        {\n            const sprite: string = source as string;\n            options = { sprite, complete };\n        }\n        else if (typeof source === \"function\")\n        {\n            options = {};\n            options.complete = source as CompleteCallback;\n        }\n        else\n        {\n            options = source as PlayOptions;\n        }\n\n        options = Object.assign({\n            complete: null,\n            loaded: null,\n            sprite: null,\n            start: 0,\n            fadeIn: 0,\n            fadeOut: 0,\n        }, options || {});\n\n        // A sprite is specified, add the options\n        if (options.sprite)\n        {\n            const alias: string = options.sprite;\n            // @if DEBUG\n            console.assert(!!this._sprites[alias], `Alias ${alias} is not available`);\n            // @endif\n            const sprite: SoundSprite = this._sprites[alias];\n            options.start = sprite.start;\n            options.end = sprite.end;\n            options.speed = sprite.speed;\n            delete options.sprite;\n        }\n\n        // @deprecated offset option\n        if ((options as any).offset) {\n            options.start = (options as any).offset as number;\n        }\n\n        // if not yet playable, ignore\n        // - usefull when the sound download isnt yet completed\n        if (!this.isLoaded)\n        {\n            return new Promise<IMediaInstance>((resolve, reject) =>\n            {\n                this.autoPlay = true;\n                this._autoPlayOptions = options;\n                this._preload((err: Error, sound: Sound, instance: IMediaInstance) =>\n                {\n                    if (err)\n                    {\n                        reject(err);\n                    }\n                    else\n                    {\n                        if (options.loaded)\n                        {\n                            options.loaded(err, sound, instance);\n                        }\n                        resolve(instance);\n                    }\n                });\n            });\n        }\n\n        // Stop all sounds\n        if (this.singleInstance)\n        {\n            this._removeInstances();\n        }\n\n        // clone the bufferSource\n        const instance = this._createInstance();\n        this._instances.push(instance);\n        this.isPlaying = true;\n        instance.once(\"end\", () => {\n            if (options.complete)\n            {\n                options.complete(this);\n            }\n            this._onComplete(instance);\n        });\n        instance.once(\"stop\", () => {\n            this._onComplete(instance);\n        });\n\n        instance.play(\n            options.start,\n            options.end,\n            options.speed,\n            options.loop,\n            options.fadeIn,\n            options.fadeOut,\n        );\n        return instance;\n    }\n\n    /**\n     * Gets and sets the volume.\n     * @name PIXI.sound.Sound#volume\n     * @type {Number}\n     */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = this.media.volume = volume;\n    }\n\n    /**\n     * Gets and sets the looping.\n     * @name PIXI.sound.Sound#loop\n     * @type {Boolean}\n     */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = this.media.loop = loop;\n    }\n\n    /**\n     * Starts the preloading of sound.\n     * @method PIXI.sound.Sound#_preload\n     * @private\n     */\n    private _preload(callback?: LoadedCallback): void\n    {\n        this.media.load(callback);\n    }\n\n    /**\n     * Gets the list of instances that are currently being played of this sound.\n     * @name PIXI.sound.Sound#instances\n     * @type {Array<SoundInstance>}\n     * @readonly\n     */\n    public get instances(): IMediaInstance[]\n    {\n        return this._instances;\n    }\n\n    /**\n     * Get the map of sprites.\n     * @name PIXI.sound.Sound#sprites\n     * @type {Object}\n     * @readonly\n     */\n    public get sprites(): SoundSprites\n    {\n        return this._sprites;\n    }\n\n    /**\n     * Get the duration of the audio in seconds.\n     * @name PIXI.sound.Sound#duration\n     * @type {Number}\n     */\n    public get duration(): number\n    {\n        return this.media.duration;\n    }\n\n    /**\n     * Auto play the first instance.\n     * @method PIXI.sound.Sound#autoPlayStart\n     * @private\n     */\n    public autoPlayStart(): IMediaInstance\n    {\n        let instance: IMediaInstance;\n        if (this.autoPlay)\n        {\n            instance = this.play(this._autoPlayOptions) as IMediaInstance;\n        }\n        return instance;\n    }\n\n    /**\n     * Removes all instances.\n     * @method PIXI.sound.Sound#_removeInstances\n     * @private\n     */\n    private _removeInstances(): void\n    {\n        // destroying also stops\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._poolInstance(this._instances[i]);\n        }\n        this._instances.length = 0;\n    }\n\n    /**\n     * Sound instance completed.\n     * @method PIXI.sound.Sound#_onComplete\n     * @private\n     * @param {PIXI.sound.SoundInstance} instance\n     */\n    private _onComplete(instance: IMediaInstance): void\n    {\n        if (this._instances)\n        {\n            const index = this._instances.indexOf(instance);\n            if (index > -1)\n            {\n                this._instances.splice(index, 1);\n            }\n            this.isPlaying = this._instances.length > 0;\n        }\n        this._poolInstance(instance);\n    }\n\n    /**\n     * Create a new instance.\n     * @method PIXI.sound.Sound#_createInstance\n     * @private\n     * @return {PIXI.sound.IMediaInstance} New instance to use\n     */\n    private _createInstance(): IMediaInstance\n    {\n        if (Sound._pool.length > 0)\n        {\n            const instance: IMediaInstance = Sound._pool.pop();\n            instance.init(this.media);\n            return instance;\n        }\n        return this.media.create();\n    }\n\n    /**\n     * Destroy/recycling the instance object.\n     * @method PIXI.sound.Sound#_poolInstance\n     * @private\n     * @param {PIXI.sound.IMediaInstance} instance - Instance to recycle\n     */\n    private _poolInstance(instance: IMediaInstance): void\n    {\n        instance.destroy();\n        // Add it if it isn't already added\n        if (Sound._pool.indexOf(instance) < 0)\n        {\n            Sound._pool.push(instance);\n        }\n    }\n}\n","import SoundLibrary from \"../SoundLibrary\";\nimport Sound from \"../Sound\";\nimport WebAudioMedia from \"../webaudio/WebAudioMedia\";\nimport WebAudioContext from \"../webaudio/WebAudioContext\";\n\nexport interface RenderOptions {\n    width?: number;\n    height?: number;\n    fill?: string|CanvasPattern|CanvasGradient;\n}\n\n/**\n * Utilities that work with sounds.\n * @namespace PIXI.sound.utils\n */\nexport default class SoundUtils\n{\n    /**\n     * Increment the alias for play once\n     * @static\n     * @private\n     * @default 0\n     */\n    private static PLAY_ID = 0;\n\n    /**\n     * Create a new sound for a sine wave-based tone.  **Only supported with WebAudio**\n     * @method PIXI.sound.utils.sineTone\n     * @param {Number} [hertz=200] Frequency of sound.\n     * @param {Number} [seconds=1] Duration of sound in seconds.\n     * @return {PIXI.sound.Sound} New sound.\n     */\n    public static sineTone(hertz: number = 200, seconds: number = 1): Sound\n    {\n        const sound = Sound.from({\n            singleInstance: true,\n        });\n\n        if (!(sound.media instanceof WebAudioMedia))\n        {\n            return sound;\n        }\n\n        const media = sound.media as WebAudioMedia;\n        const context = sound.context as WebAudioContext;\n\n        // set default value\n        const nChannels = 1;\n        const sampleRate = 48000;\n        const amplitude = 2;\n\n        // create the buffer\n        const buffer = context.audioContext.createBuffer(\n            nChannels,\n            seconds * sampleRate,\n            sampleRate,\n        );\n        const fArray = buffer.getChannelData(0);\n\n        // fill the buffer\n        for (let i = 0; i < fArray.length; i++)\n        {\n            const time  = i / buffer.sampleRate;\n            const angle = hertz * time * Math.PI;\n            fArray[i] = Math.sin(angle) * amplitude;\n        }\n\n        // set the buffer\n        media.buffer = buffer;\n        sound.isLoaded = true;\n        return sound;\n    }\n\n    /**\n     * Render image as Texture. **Only supported with WebAudio**\n     * @method PIXI.sound.utils.render\n     * @param {PIXI.sound.Sound} sound Instance of sound to render\n     * @param {Object} [options] Custom rendering options\n     * @param {Number} [options.width=512] Width of the render\n     * @param {Number} [options.height=128] Height of the render\n     * @param {string|CanvasPattern|CanvasGradient} [options.fill='black'] Fill style for waveform\n     * @return {PIXI.Texture} Result texture\n     */\n    public static render(sound: Sound, options?: RenderOptions): PIXI.BaseTexture\n    {\n        const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n\n        options = Object.assign({\n            width: 512,\n            height: 128,\n            fill: \"black\",\n        }, options || {});\n\n        canvas.width = options.width;\n        canvas.height = options.height;\n\n        const baseTexture = PIXI.BaseTexture.fromCanvas(canvas);\n\n        if (!(sound.media instanceof WebAudioMedia))\n        {\n            return baseTexture;\n        }\n\n        const media: WebAudioMedia = sound.media as WebAudioMedia;\n\n        console.assert(!!media.buffer, \"No buffer found, load first\");        \n\n        const context: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n        context.fillStyle = options.fill;\n        const data: Float32Array = media.buffer.getChannelData(0);\n        const step: number = Math.ceil(data.length / options.width);\n        const amp: number = options.height / 2;\n\n        for (let i: number = 0; i < options.width; i++)\n        {\n            let min: number = 1.0;\n            let max: number = -1.0;\n\n            for (let j: number = 0; j < step; j++)\n            {\n                const datum: number = data[(i * step) + j];\n\n                if (datum < min)\n                {\n                    min = datum;\n                }\n                if (datum > max)\n                {\n                    max = datum;\n                }\n            }\n            context.fillRect(i, (1 + min) * amp, 1, Math.max(1, (max - min) * amp));\n        }\n        return baseTexture;\n    }\n\n    /**\n     * Create a new \"Audio\" stream based on given audio path and project uri; returns the audio object.\n     * @method PIXI.sound.utils.playOnce\n     * @static\n     * @param {String} fileName Full path of the file to play.\n     * @param {Function} callback Callback when complete.\n     * @return {string} New audio element alias.\n     */\n    public static playOnce(url: string, callback?: (err?: Error) => void): string\n    {\n        const alias = `alias${SoundUtils.PLAY_ID++}`;\n\n        SoundLibrary.instance.add(alias, {\n            url,\n            preload: true,\n            autoPlay: true,\n            loaded: (err: Error) => {\n                if (err)\n                {\n                    console.error(err);\n                    SoundLibrary.instance.remove(alias);\n                    if (callback)\n                    {\n                        callback(err);\n                    }\n                }\n            },\n            complete: () => {\n                SoundLibrary.instance.remove(alias);\n                if (callback)\n                {\n                    callback(null);\n                }\n            },\n        });\n        return alias;\n    }\n}\n","import Filterable from \"../Filterable\";\nimport { IMediaContext } from \"../interfaces/IMediaContext\";\n\n/**\n * @description Main class to handle WebAudio API. There's a simple chain\n * of AudioNode elements: analyser > gainNode > compressor > context.destination.\n * any filters that are added are inserted between the analyser and gainNode nodes\n * @class WebAudioContext\n * @extends PIXI.sound.Filterable\n * @memberof PIXI.sound.webaudio\n */\nexport default class WebAudioContext extends Filterable implements IMediaContext\n{\n    /**\n     * Handle the volume.\n     * @name PIXI.sound.webaudio.WebAudioContext#gain\n     * @type {GainNode}\n     * @readonly\n     */\n    public gain: GainNode;\n\n    /**\n     * Context Compressor node\n     * @name PIXI.sound.webaudio.WebAudioContext#compressor\n     * @type {DynamicsCompressorNode}\n     * @readonly\n     */\n    public compressor: DynamicsCompressorNode;\n\n    /**\n     * Context Analyser node\n     * @name PIXI.sound.webaudio.WebAudioContext#analyser\n     * @type {AnalyserNode}\n     * @readonly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * The instance of the AudioContext for WebAudio API.\n     * @name PIXI.sound.webaudio.WebAudioContext#_ctx\n     * @type {AudioContext}\n     * @private\n     */\n    private _ctx: AudioContext;\n\n    /**\n     * The instance of the OfflineAudioContext for fast decoding audio.\n     * @name PIXI.sound.webaudio.WebAudioContext#_offlineCtx\n     * @type {OfflineAudioContext}\n     * @private\n     */\n    private _offlineCtx: OfflineAudioContext;\n\n    /**\n     * Current muted status of the context\n     * @name PIXI.sound.webaudio.WebAudioContext#_muted\n     * @type {Boolean}\n     * @private\n     * @default false\n     */\n    private _muted: boolean;\n\n    /**\n     * Current volume from 0 to 1\n     * @name PIXI.sound.webaudio.WebAudioContext#_volume\n     * @type {Number}\n     * @private\n     * @default 1\n     */\n    private _volume: number;\n\n    /**\n     * Current paused status\n     * @name PIXI.sound.webaudio.WebAudioContext#_paused\n     * @type {Boolean}\n     * @private\n     * @default false\n     */\n    private _paused: boolean;\n\n    /**\n     * Indicated whether audio on iOS has been unlocked, which requires a touchend/mousedown event that plays an\n     * empty sound.\n     * @name PIXI.sound.webaudio.WebAudioContext#_unlocked\n     * @type {boolean}\n     * @private\n     */\n    private _unlocked: boolean;\n\n    constructor()\n    {\n        const ctx = new WebAudioContext.AudioContext();\n        const gain: GainNode = ctx.createGain();\n        const compressor: DynamicsCompressorNode = ctx.createDynamicsCompressor();\n        const analyser: AnalyserNode = ctx.createAnalyser();\n\n        // setup the end of the node chain\n        analyser.connect(gain);\n        gain.connect(compressor);\n        compressor.connect(ctx.destination);\n\n        super(analyser, gain);\n\n        this._ctx = ctx;\n        this._offlineCtx = new WebAudioContext.OfflineAudioContext(1, 2, ctx.sampleRate);\n        this._unlocked = false;\n\n        this.gain = gain;\n        this.compressor = compressor;\n        this.analyser = analyser;\n\n        // Set the defaults\n        this.volume = 1;\n        this.muted = false;\n        this.paused = false;\n\n        // Listen for document level clicks to unlock WebAudio on iOS. See the _unlock method.\n        if (\"ontouchstart\" in window && ctx.state !== \"running\")\n        {\n            this._unlock(); // When played inside of a touch event, this will enable audio on iOS immediately.\n            this._unlock = this._unlock.bind(this);\n            document.addEventListener(\"mousedown\", this._unlock, true);\n            document.addEventListener(\"touchstart\", this._unlock, true);\n            document.addEventListener(\"touchend\", this._unlock, true);\n        }\n    }\n\n    /**\n     * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\n     * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\n     * will fail if the user presses for too long, indicating a scroll event instead of a click event.\n     *\n     * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\n     * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\n     * stick with `mousedown` and `touchend`.\n     * @method PIXI.sound.webaudio.WebAudioContext#_unlock\n     * @private\n     */\n    private _unlock(): void\n    {\n        if (this._unlocked)\n        {\n            return;\n        }\n        this.playEmptySound();\n        if (this._ctx.state === \"running\")\n        {\n            document.removeEventListener(\"mousedown\", this._unlock, true);\n            document.removeEventListener(\"touchend\", this._unlock, true);\n            document.removeEventListener(\"touchstart\", this._unlock, true);\n            this._unlocked = true;\n        }\n    }\n\n    /**\n     * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\n     * require the first sound to be played inside of a user initiated event (touch/click).\n     * @method PIXI.sound.webaudio.WebAudioContext#playEmptySound\n     */\n    public playEmptySound(): void\n    {\n        const source = this._ctx.createBufferSource();\n        source.buffer = this._ctx.createBuffer(1, 1, 22050);\n        source.connect(this._ctx.destination);\n        source.start(0, 0, 0);\n    }\n\n    /**\n     * Get AudioContext class, if not supported returns `null`\n     * @name PIXI.sound.webaudio.WebAudioContext.AudioContext\n     * @type {Function}\n     * @static\n     */\n    public static get AudioContext(): typeof AudioContext\n    {\n        const win: any = window as any;\n        return (\n            win.AudioContext ||\n            win.webkitAudioContext ||\n            null\n        );\n    }\n\n    /**\n     * Get OfflineAudioContext class, if not supported returns `null`\n     * @name PIXI.sound.webaudio.WebAudioContext.OfflineAudioContext\n     * @type {Function}\n     * @static\n     */\n    public static get OfflineAudioContext(): typeof OfflineAudioContext\n    {\n        const win: any = window as any;\n        return (\n            win.OfflineAudioContext ||\n            win.webkitOfflineAudioContext ||\n            null\n        );\n    }\n\n    /**\n     * Destroy this context.\n     * @method PIXI.sound.webaudio.WebAudioContext#destroy\n     */\n    public destroy()\n    {\n        super.destroy();\n\n        const ctx: any = this._ctx as any;\n        // check if browser supports AudioContext.close()\n        if (typeof ctx.close !== \"undefined\")\n        {\n            ctx.close();\n        }\n        this.analyser.disconnect();\n        this.gain.disconnect();\n        this.compressor.disconnect();\n        this.gain = null;\n        this.analyser = null;\n        this.compressor = null;\n        this._offlineCtx = null;\n        this._ctx = null;\n    }\n\n    /**\n     * The WebAudio API AudioContext object.\n     * @name PIXI.sound.webaudio.WebAudioContext#audioContext\n     * @type {AudioContext}\n     * @readonly\n     */\n    public get audioContext(): AudioContext\n    {\n        return this._ctx;\n    }\n\n    /**\n     * The WebAudio API OfflineAudioContext object.\n     * @name PIXI.sound.webaudio.WebAudioContext#offlineContext\n     * @type {OfflineAudioContext}\n     * @readonly\n     */\n    public get offlineContext(): OfflineAudioContext\n    {\n        return this._offlineCtx;\n    }\n\n    /**\n     * Sets the muted state.\n     * @type {Boolean}\n     * @name PIXI.sound.webaudio.WebAudioContext#muted\n     * @default false\n     */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = !!muted;\n        this.gain.gain.value = this._muted ? 0 : this._volume;\n    }\n\n    /**\n     * Sets the volume from 0 to 1.\n     * @type {Number}\n     * @name PIXI.sound.webaudio.WebAudioContext#volume\n     * @default 1\n     */\n    public set volume(volume: number)\n    {\n        // update volume\n        this._volume = volume;\n\n        // update actual volume IIF not muted\n        if (!this._muted)\n        {\n            this.gain.gain.value = this._volume;\n        }\n    }\n    public get volume(): number\n    {\n        return this._volume;\n    }\n\n    /**\n     * Pauses all sounds.\n     * @type {Boolean}\n     * @name PIXI.sound.webaudio.WebAudioContext#paused\n     * @default false\n     */\n    public set paused(paused: boolean)\n    {\n        if (paused && this._ctx.state === \"running\")\n        {\n            (this._ctx as any).suspend();\n        }\n        else if (!paused && this._ctx.state === \"suspended\")\n        {\n            (this._ctx as any).resume();\n        }\n        this._paused = paused;\n    }\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    /**\n     * Toggles the muted state.\n     * @method PIXI.sound.webaudio.WebAudioContext#toggleMute\n     * @return {Boolean} The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        return this._muted;\n    }\n\n    /**\n     * Toggles the paused state.\n     * @method PIXI.sound.webaudio.WebAudioContext#togglePause\n     * @return {Boolean} The current muted state.\n     */\n    public togglePause(): boolean\n    {\n        this.paused = !this.paused;\n        return this._paused;\n    }\n\n    /**\n     * Decode the audio data\n     * @method decode\n     * @param {ArrayBuffer} arrayBuffer Buffer from loader\n     * @param {Function} callback When completed, error and audioBuffer are parameters.\n     */\n    public decode(arrayBuffer: ArrayBuffer, callback: (err?: Error, buffer?: AudioBuffer) => void): void\n    {\n        this._offlineCtx.decodeAudioData(\n            arrayBuffer, (buffer: AudioBuffer) => {\n                callback(null, buffer);\n            },\n            () => {\n                callback(new Error(\"Unable to decode file\"));\n            },\n        );\n    }\n}\n","import ObjectAssign from \"es6-object-assign\";\nimport PromisePolyfill from \"promise-polyfill\";\nimport Filterable from \"./Filterable\";\nimport * as filters from \"./filters\";\nimport Filter from \"./filters/Filter\";\nimport * as htmlaudio from \"./htmlaudio\";\nimport {HTMLAudioContext} from \"./htmlaudio\";\nimport {IMediaContext} from \"./interfaces/IMediaContext\";\nimport {IMediaInstance} from \"./interfaces/IMediaInstance\";\nimport LoaderMiddleware from \"./loader\";\nimport {CompleteCallback, Options, PlayOptions} from \"./Sound\";\nimport Sound from \"./Sound\";\nimport SoundSprite from \"./sprites/SoundSprite\";\nimport utils from \"./utils/SoundUtils\";\nimport {WebAudioContext} from \"./webaudio\";\nimport * as webaudio from \"./webaudio\";\n\nexport type SoundMap = {[id: string]: Options|string|ArrayBuffer|HTMLAudioElement};\n\n/**\n * Playing sound files with WebAudio API\n * @namespace PIXI.sound\n */\n\n/**\n * @description Manages the playback of sounds.\n * @class SoundLibrary\n * @memberof PIXI.sound\n * @private\n */\nexport default class SoundLibrary\n{\n    /**\n     * Singleton instance\n     */\n    public static instance: SoundLibrary;\n\n    /**\n     * For legacy approach for Audio. Instead of using WebAudio API\n     * for playback of sounds, it will use HTML5 `<audio>` element.\n     * @name PIXI.sound#_useLegacy\n     * @type {Boolean}\n     * @default false\n     * @private\n     */\n    private _useLegacy: boolean;\n\n    /**\n     * The global context to use.\n     * @name PIXI.sound#_context\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @private\n     */\n    private _context: IMediaContext;\n\n    /**\n     * The WebAudio specific context\n     * @name PIXI.sound#_webAudioContext\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @private\n     */\n    private _webAudioContext: WebAudioContext;\n\n    /**\n     * The HTML Audio (legacy) context.\n     * @name PIXI.sound#_htmlAudioContext\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @private\n     */\n    private _htmlAudioContext: HTMLAudioContext;\n\n    /**\n     * The map of all sounds by alias.\n     * @name PIXI.sound#_sounds\n     * @type {Object}\n     * @private\n     */\n    private _sounds: {[id: string]: Sound};\n\n    constructor()\n    {\n        if (this.supported)\n        {\n            this._webAudioContext = new WebAudioContext();\n        }\n        this._htmlAudioContext = new HTMLAudioContext();\n        this._sounds = {};\n        this.useLegacy = !this.supported;\n    }\n\n    /**\n     * The global context to use.\n     * @name PIXI.sound#context\n     * @readonly\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     */\n    public get context(): IMediaContext\n    {\n        return this._context;\n    }\n\n    /**\n     * Initialize the singleton of the library\n     * @method PIXI.sound.SoundLibrary.init\n     * @return {PIXI.sound}\n     */\n    public static init(): SoundLibrary\n    {\n        if (SoundLibrary.instance)\n        {\n            throw new Error(\"SoundLibrary is already created\");\n        }\n        const instance = SoundLibrary.instance = new SoundLibrary();\n\n        // Apply polyfills\n        if (typeof Object.assign === \"undefined\")\n        {\n            ObjectAssign.polyfill();\n        }\n\n        if (typeof Promise === \"undefined\")\n        {\n            (window as any).Promise = PromisePolyfill;\n        }\n\n        // In some cases loaders can be not included\n        // the the bundle for PixiJS, custom builds\n        if (typeof PIXI.loaders !== \"undefined\")\n        {\n            // Install the middleware to support\n            // PIXI.loader and new PIXI.loaders.Loader\n            LoaderMiddleware.install(instance);\n        }\n\n        // Remove the global namespace created by rollup\n        // makes it possible for users to opt-in to exposing\n        // the library globally\n        if (typeof (window as any).__pixiSound === \"undefined\")\n        {\n            delete (window as any).__pixiSound;\n        }\n\n        // Webpack and NodeJS-like environments will not expose\n        // the library to the window by default, user must opt-in\n        if (typeof module === \"undefined\")\n        {\n            instance.global();\n        }\n\n        return instance;\n    }\n\n    /**\n     * Set the `PIXI.sound` window namespace object. By default\n     * the global namespace is disabled in environments that use\n     * require/module (e.g. Webpack), so `PIXI.sound` would not\n     * be accessible these environments. Window environments\n     * will automatically expose the window object, calling this\n     * method will do nothing.\n     * @method PIXI.sound#global\n     * @example\n     * import {sound} from 'pixi-sound';\n     * sound.global(); // Now can use PIXI.sound\n     */\n    public global(): void\n    {\n        const PixiJS = PIXI as any;\n\n        if (!PixiJS.sound)\n        {\n            Object.defineProperty(PixiJS, \"sound\",\n            {\n                get() { return SoundLibrary.instance; },\n            });\n\n            Object.defineProperties(SoundLibrary.instance,\n            {\n                filters: { get() { return filters; } },\n                htmlaudio: { get() { return htmlaudio; } },\n                webaudio: { get() { return webaudio; } },\n                utils: { get() { return utils; } },\n                Sound: { get() { return Sound; } },\n                SoundSprite: { get() { return SoundSprite; } },\n                Filterable: { get() { return Filterable; } },\n                SoundLibrary: { get() { return SoundLibrary; } },\n            });\n        }\n    }\n\n    /**\n     * Apply filters to all sounds. Can be useful\n     * for setting global planning or global effects.\n     * **Only supported with WebAudio.**\n     * @example\n     * // Adds a filter to pan all output left\n     * PIXI.sound.filtersAll = [\n     *     new PIXI.sound.filters.StereoFilter(-1)\n     * ];\n     * @name PIXI.sound#filtersAll\n     * @type {PIXI.sound.filters.Filter[]}\n     */\n    public get filtersAll(): Filter[]\n    {\n        if (!this.useLegacy)\n        {\n            return this._context.filters;\n        }\n        return [];\n    }\n    public set filtersAll(filters: Filter[])\n    {\n        if (!this.useLegacy)\n        {\n            this._context.filters = filters;\n        }\n    }\n\n    /**\n     * `true` if WebAudio is supported on the current browser.\n     * @name PIXI.sound#supported\n     * @readonly\n     * @type {Boolean}\n     */\n    public get supported(): boolean\n    {\n        return WebAudioContext.AudioContext !== null;\n    }\n\n    /**\n     * Register an existing sound with the library cache.\n     * @method PIXI.sound#add\n     * @param {String} alias The sound alias reference.\n     * @param {PIXI.sound.Sound} sound Sound reference to use.\n     * @return {PIXI.sound.Sound} Instance of the Sound object.\n     */\n\n    /**\n     * Adds a new sound by alias.\n     * @method PIXI.sound#add\n     * @param {String} alias The sound alias reference.\n     * @param {ArrayBuffer|String|Object|HTMLAudioElement} options Either the path or url to the source file.\n     *        or the object of options to use.\n     * @param {String} [options.url] If `options` is an object, the source of file.\n     * @param {ArrayBuffer|HTMLAudioElement} [options.source] If sound is already preloaded, available.\n     * @param {Boolean} [options.autoPlay=false] true to play after loading.\n     * @param {Boolean} [options.preload=false] true to immediately start preloading.\n     * @param {Boolean} [options.singleInstance=false] `true` to disallow playing multiple layered instances at once.\n     * @param {Number} [options.volume=1] The amount of volume 1 = 100%.\n     * @param {Number} [options.speed=1] The playback rate where 1 is 100% speed.\n     * @param {Boolean} [options.useXHR=true] true to use XMLHttpRequest to load the sound. Default is false,\n     *        loaded with NodeJS's `fs` module.\n     * @param {Object} [options.sprites] The map of sprite data. Where a sprite is an object\n     *        with a `start` and `end`, which are the times in seconds. Optionally, can include\n     *        a `speed` amount where 1 is 100% speed.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete=null] Global complete callback when\n     *        play is finished.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\n     * @return {PIXI.sound.Sound} Instance of the Sound object.\n     */\n    public add(alias: string, options: Options|string|ArrayBuffer|HTMLAudioElement|Sound): Sound;\n\n    /**\n     * Adds multiple sounds at once.\n     * @method PIXI.sound#add\n     * @param {Object} map Map of sounds to add, the key is the alias, the value is the\n     *        `string`, `ArrayBuffer`, `HTMLAudioElement` or the list of options\n     *        (see {@link PIXI.sound.add} for options).\n     * @param {Object} globalOptions The default options for all sounds.\n     *        if a property is defined, it will use the local property instead.\n     * @return {PIXI.sound.Sound} Instance to the Sound object.\n     */\n    public add(map: SoundMap, globalOptions?: Options): {[id: string]: Sound};\n\n    // Actual method\n    public add(source: string|SoundMap, sourceOptions?: Options|string|ArrayBuffer|HTMLAudioElement|Sound):\n        {[id: string]: Sound}|Sound\n    {\n        if (typeof source === \"object\")\n        {\n            const results: {[id: string]: Sound} = {};\n\n            for (const alias in source)\n            {\n                const options: Options = this._getOptions(\n                    source[alias],\n                    sourceOptions as Options,\n                );\n                results[alias] = this.add(alias, options);\n            }\n            return results;\n        }\n        else if (typeof source === \"string\")\n        {\n            // @if DEBUG\n            console.assert(!this._sounds[source], `Sound with alias ${source} already exists.`);\n            // @endif\n\n            if (sourceOptions instanceof Sound)\n            {\n                this._sounds[source] = sourceOptions;\n                return sourceOptions;\n            }\n            else\n            {\n                const options: Options = this._getOptions(sourceOptions);\n                const sound: Sound = Sound.from(options);\n                this._sounds[source] = sound;\n                return sound;\n            }\n        }\n    }\n\n    /**\n     * Internal methods for getting the options object\n     * @method PIXI.sound#_getOptions\n     * @private\n     * @param {string|ArrayBuffer|HTMLAudioElement|Object} source The source options\n     * @param {Object} [overrides] Override default options\n     * @return {Object} The construction options\n     */\n    private _getOptions(source: string|ArrayBuffer|HTMLAudioElement|Options, overrides?: Options): Options\n    {\n        let options: Options;\n\n        if (typeof source === \"string\")\n        {\n            options = { url: source };\n        }\n        else if (source instanceof ArrayBuffer || source instanceof HTMLAudioElement)\n        {\n            options = { source };\n        }\n        else\n        {\n            options = source as Options;\n        }\n        return Object.assign(options, overrides || {}) as Options;\n    }\n\n    /**\n     * Do not use WebAudio, force the use of legacy.\n     * @name PIXI.sound#useLegacy\n     * @type {Boolean}\n     */\n    public get useLegacy(): boolean\n    {\n        return this._useLegacy;\n    }\n    public set useLegacy(legacy: boolean)\n    {\n        LoaderMiddleware.legacy = legacy;\n        this._useLegacy = legacy;\n\n        // Set the context to use\n        if (!legacy && this.supported)\n        {\n            this._context = this._webAudioContext;\n        }\n        else\n        {\n            this._context = this._htmlAudioContext;\n        }\n    }\n\n    /**\n     * Removes a sound by alias.\n     * @method PIXI.sound#remove\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public remove(alias: string): SoundLibrary\n    {\n        this.exists(alias, true);\n        this._sounds[alias].destroy();\n        delete this._sounds[alias];\n        return this;\n    }\n\n    /**\n     * Set the global volume for all sounds. To set per-sound volume see {@link PIXI.sound#volume}.\n     * @name PIXI.sound#volumeAll\n     * @type {Number}\n     */\n    public get volumeAll(): number\n    {\n        return this._context.volume;\n    }\n    public set volumeAll(volume: number)\n    {\n        this._context.volume = volume;\n    }\n\n    /**\n     * Toggle paused property for all sounds.\n     * @method PIXI.sound#togglePauseAll\n     * @return {Boolean} `true` if all sounds are paused.\n     */\n    public togglePauseAll(): boolean\n    {\n        return this._context.togglePause();\n    }\n\n    /**\n     * Pauses any playing sounds.\n     * @method PIXI.sound#pauseAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public pauseAll(): SoundLibrary\n    {\n        this._context.paused = true;\n        return this;\n    }\n\n    /**\n     * Resumes any sounds.\n     * @method PIXI.sound#resumeAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public resumeAll(): SoundLibrary\n    {\n        this._context.paused = false;\n        return this;\n    }\n\n    /**\n     * Toggle muted property for all sounds.\n     * @method PIXI.sound#toggleMuteAll\n     * @return {Boolean} `true` if all sounds are muted.\n     */\n    public toggleMuteAll(): boolean\n    {\n        return this._context.toggleMute();\n    }\n\n    /**\n     * Mutes all playing sounds.\n     * @method PIXI.sound#muteAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public muteAll(): SoundLibrary\n    {\n        this._context.muted = true;\n        return this;\n    }\n\n    /**\n     * Unmutes all playing sounds.\n     * @method PIXI.sound#unmuteAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public unmuteAll(): SoundLibrary\n    {\n        this._context.muted = false;\n        return this;\n    }\n\n    /**\n     * Stops and removes all sounds. They cannot be used after this.\n     * @method PIXI.sound#removeAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public removeAll(): SoundLibrary\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].destroy();\n            delete this._sounds[alias];\n        }\n        return this;\n    }\n\n    /**\n     * Stops all sounds.\n     * @method PIXI.sound#stopAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public stopAll(): SoundLibrary\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].stop();\n        }\n        return this;\n    }\n\n    /**\n     * Checks if a sound by alias exists.\n     * @method PIXI.sound#exists\n     * @param {String} alias Check for alias.\n     * @return {Boolean} true if the sound exists.\n     */\n    public exists(alias: string, assert: boolean= false): boolean\n    {\n        const exists = !!this._sounds[alias];\n        if (assert)\n        {\n            console.assert(exists, `No sound matching alias '${alias}'.`);\n        }\n        return exists;\n    }\n\n    /**\n     * Find a sound by alias.\n     * @method PIXI.sound#find\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public find(alias: string): Sound\n    {\n        this.exists(alias, true);\n        return this._sounds[alias];\n    }\n\n    /**\n     * Plays a sound.\n     * @method PIXI.sound#play\n     * @param {String} alias The sound alias reference.\n     * @param {String} sprite The alias of the sprite to play.\n     * @return {PIXI.sound.SoundInstance|null} The sound instance, this cannot be reused\n     *         after it is done playing. Returns `null` if the sound has not yet loaded.\n     */\n\n    /**\n     * Plays a sound.\n     * @method PIXI.sound#play\n     * @param {String} alias The sound alias reference.\n     * @param {Object|Function} options The options or callback when done.\n     * @param {Function} [options.complete] When completed.\n     * @param {Function} [options.loaded] If not already preloaded, callback when finishes load.\n     * @param {Number} [options.start=0] Start time offset.\n     * @param {Number} [options.end] End time offset.\n     * @param {Number} [options.speed] Override default speed, default to the Sound's speed setting.\n     * @param {Boolean} [options.loop] Override default loop, default to the Sound's loop setting.\n     * @return {PIXI.sound.SoundInstance|Promise<PIXI.sound.SoundInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(alias: string, options?: PlayOptions|CompleteCallback|string): IMediaInstance|Promise<IMediaInstance>\n    {\n        return this.find(alias).play(options);\n    }\n\n    /**\n     * Stops a sound.\n     * @method PIXI.sound#stop\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public stop(alias: string): Sound\n    {\n        return this.find(alias).stop();\n    }\n\n    /**\n     * Pauses a sound.\n     * @method PIXI.sound#pause\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public pause(alias: string): Sound\n    {\n        return this.find(alias).pause();\n    }\n\n    /**\n     * Resumes a sound.\n     * @method PIXI.sound#resume\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public resume(alias: string): Sound\n    {\n        return this.find(alias).resume();\n    }\n\n    /**\n     * Get or set the volume for a sound.\n     * @method PIXI.sound#volume\n     * @param {String} alias The sound alias reference.\n     * @param {Number} [volume] Optional current volume to set.\n     * @return {Number} The current volume.\n     */\n    public volume(alias: string, volume?: number): number\n    {\n        const sound = this.find(alias);\n        if (volume !== undefined) {\n            sound.volume = volume;\n        }\n        return sound.volume;\n    }\n\n    /**\n     * Get the length of a sound in seconds.\n     * @method PIXI.sound#duration\n     * @param {String} alias The sound alias reference.\n     * @return {Number} The current duration in seconds.\n     */\n    public duration(alias: string): number\n    {\n        return this.find(alias).duration;\n    }\n\n    /**\n     * Destroys the sound module.\n     * @method PIXI.sound#destroy\n     * @private\n     */\n    public destroy(): void\n    {\n        this.removeAll();\n        this._sounds = null;\n        this._context = null;\n    }\n}\n","import Filter from './Filter';\nimport SoundLibrary from '../SoundLibrary';\n\ninterface Band {\n    f:number;\n    type:string;\n    gain:number;\n}\n\n/**\n * Filter for adding equalizer bands.\n *\n * @class EqualizerFilter\n * @memberof PIXI.sound.filters\n * @param {number} [f32=0] Default gain for 32 Hz\n * @param {number} [f64=0] Default gain for 64 Hz\n * @param {number} [f125=0] Default gain for 125 Hz\n * @param {number} [f250=0] Default gain for 250 Hz\n * @param {number} [f500=0] Default gain for 500 Hz\n * @param {number} [f1k=0] Default gain for 1000 Hz\n * @param {number} [f2k=0] Default gain for 2000 Hz\n * @param {number} [f4k=0] Default gain for 4000 Hz\n * @param {number} [f8k=0] Default gain for 8000 Hz\n * @param {number} [f16k=0] Default gain for 16000 Hz\n */\nexport default class EqualizerFilter extends Filter\n{\n    /**\n     * Band at 32 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F32\n     * @type {Number}\n     * @readonly\n     */\n    public static F32:number = 32;\n\n    /**\n     * Band at 64 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F64\n     * @type {Number}\n     * @readonly\n     */\n    public static F64:number = 64;\n    \n    /**\n     * Band at 125 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F125\n     * @type {Number}\n     * @readonly\n     */\n    public static F125:number = 125;\n    \n    /**\n     * Band at 250 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F250\n     * @type {Number}\n     * @readonly\n     */\n    public static F250:number = 250;\n    \n    /**\n     * Band at 500 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F500\n     * @type {Number}\n     * @readonly\n     */\n    public static F500:number = 500;\n    \n    /**\n     * Band at 1000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F1K\n     * @type {Number}\n     * @readonly\n     */\n    public static F1K:number = 1000;\n    \n    /**\n     * Band at 2000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F2K\n     * @type {Number}\n     * @readonly\n     */\n    public static F2K:number = 2000;\n    \n    /**\n     * Band at 4000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F4K\n     * @type {Number}\n     * @readonly\n     */\n    public static F4K:number = 4000;\n    \n    /**\n     * Band at 8000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F8K\n     * @type {Number}\n     * @readonly\n     */\n    public static F8K:number = 8000;\n    \n    /**\n     * Band at 16000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F16K\n     * @type {Number}\n     * @readonly\n     */\n    public static F16K:number = 16000;\n\n    /**\n     * The list of bands \n     * @name PIXI.sounds.filters.EqualizerFilter#bands\n     * @type {BiquadFilterNode[]}\n     * @readonly\n     */\n    public bands:BiquadFilterNode[];\n\n    /**\n     * The map of bands to frequency\n     * @name PIXI.sounds.filters.EqualizerFilter#bandsMap\n     * @type {Object}\n     * @readonly\n     */\n    public bandsMap:{[id:number]:BiquadFilterNode};\n\n    constructor(f32:number = 0, f64:number = 0, f125:number = 0, f250:number = 0, f500:number = 0,\n        f1k:number = 0, f2k:number = 0, f4k:number = 0, f8k:number = 0, f16k:number = 0)\n    {\n        if (SoundLibrary.instance.useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        const equalizerBands:Band[] = [\n            {\n                f: EqualizerFilter.F32,\n                type: 'lowshelf',\n                gain: f32\n            },\n            {\n                f: EqualizerFilter.F64,\n                type: 'peaking',\n                gain: f64\n            },\n            {\n                f: EqualizerFilter.F125,\n                type: 'peaking',\n                gain: f125\n            },\n            {\n                f: EqualizerFilter.F250,\n                type: 'peaking',\n                gain: f250\n            },\n            {\n                f: EqualizerFilter.F500,\n                type: 'peaking',\n                gain: f500\n            },\n            {\n                f: EqualizerFilter.F1K,\n                type: 'peaking',\n                gain: f1k\n            },\n            {\n                f: EqualizerFilter.F2K,\n                type: 'peaking',\n                gain: f2k\n            },\n            {\n                f: EqualizerFilter.F4K,\n                type: 'peaking',\n                gain: f4k\n            },\n            {\n                f: EqualizerFilter.F8K,\n                type: 'peaking',\n                gain: f8k\n            },\n            {\n                f: EqualizerFilter.F16K,\n                type: 'highshelf',\n                gain: f16k\n            }\n        ];\n        \n        const bands:BiquadFilterNode[] = equalizerBands.map(function (band:Band)\n        {\n            const filter:BiquadFilterNode = SoundLibrary.instance.context.audioContext.createBiquadFilter();\n            filter.type = band.type as BiquadFilterType;\n            filter.gain.value = band.gain;\n            filter.Q.value = 1;\n            filter.frequency.value = band.f;\n            return filter;\n        });\n\n        // Setup the constructor AudioNode, where first is the input, and last is the output\n        super(bands[0], bands[bands.length - 1]);\n\n        // Manipulate the bands\n        this.bands = bands;\n\n        // Create a map\n        this.bandsMap = {};\n\n        for (let i = 0; i < this.bands.length; i++)\n        {\n            const node:BiquadFilterNode = this.bands[i];\n\n            // Connect the previous band to the current one\n            if (i > 0)\n            {\n                this.bands[i - 1].connect(node);\n            }\n            this.bandsMap[node.frequency.value] = node;\n        }\n    }\n\n    /**\n     * Set gain on a specific frequency.\n     * @method PIXI.sound.filters.EqualizerFilter#setGain\n     * @param {number} frequency The frequency, see EqualizerFilter.F* for bands\n     * @param {number} [gain=0] Recommended -40 to 40.\n     */\n    setGain(frequency:number, gain:number = 0): void\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw 'No band found for frequency ' + frequency;\n        }\n        this.bandsMap[frequency].gain.value = gain;\n    }\n\n    /**\n     * Get gain amount on a specific frequency.\n     * @method PIXI.sound.filters.EqualizerFilter#getGain\n     * @return {number} The amount of gain set.\n     */\n    getGain(frequency:number): number\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw 'No band found for frequency ' + frequency;\n        }\n        return this.bandsMap[frequency].gain.value;\n    }\n\n    /**\n     * Gain at 32 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f32\n     * @type {number}\n     * @default 0\n     */\n    public set f32(value:number)\n    {\n        this.setGain(EqualizerFilter.F32, value);\n    }\n    public get f32(): number\n    {\n        return this.getGain(EqualizerFilter.F32);\n    }\n\n    /**\n     * Gain at 64 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f64\n     * @type {number}\n     * @default 0\n     */\n    public set f64(value:number)\n    {\n        this.setGain(EqualizerFilter.F64, value);\n    }\n    public get f64(): number\n    {\n        return this.getGain(EqualizerFilter.F64);\n    }\n\n    /**\n     * Gain at 125 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f125\n     * @type {number}\n     * @default 0\n     */\n    public set f125(value:number)\n    {\n        this.setGain(EqualizerFilter.F125, value);\n    }\n    public get f125(): number\n    {\n        return this.getGain(EqualizerFilter.F125);\n    }\n\n    /**\n     * Gain at 250 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f250\n     * @type {number}\n     * @default 0\n     */\n    public set f250(value:number)\n    {\n        this.setGain(EqualizerFilter.F250, value);\n    }\n    public get f250(): number\n    {\n        return this.getGain(EqualizerFilter.F250);\n    }\n\n    /**\n     * Gain at 500 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f500\n     * @type {number}\n     * @default 0\n     */\n    public set f500(value:number)\n    {\n        this.setGain(EqualizerFilter.F500, value);\n    }\n    public get f500(): number\n    {\n        return this.getGain(EqualizerFilter.F500);\n    }\n\n    /**\n     * Gain at 1 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f1k\n     * @type {number}\n     * @default 0\n     */\n    public set f1k(value:number)\n    {\n        this.setGain(EqualizerFilter.F1K, value);\n    }\n    public get f1k(): number\n    {\n        return this.getGain(EqualizerFilter.F1K);\n    }\n\n    /**\n     * Gain at 2 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f2k\n     * @type {number}\n     * @default 0\n     */\n    public set f2k(value:number)\n    {\n        this.setGain(EqualizerFilter.F2K, value);\n    }\n    public get f2k(): number\n    {\n        return this.getGain(EqualizerFilter.F2K);\n    }\n\n    /**\n     * Gain at 4 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f4k\n     * @type {number}\n     * @default 0\n     */\n    public set f4k(value:number)\n    {\n        this.setGain(EqualizerFilter.F4K, value);\n    }\n    public get f4k(): number\n    {\n        return this.getGain(EqualizerFilter.F4K);\n    }\n\n    /**\n     * Gain at 8 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f8k\n     * @type {number}\n     * @default 0\n     */\n    public set f8k(value:number)\n    {\n        this.setGain(EqualizerFilter.F8K, value);\n    }\n    public get f8k(): number\n    {\n        return this.getGain(EqualizerFilter.F8K);\n    }\n\n    /**\n     * Gain at 16 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f16k\n     * @type {number}\n     * @default 0\n     */\n    public set f16k(value:number)\n    {\n        this.setGain(EqualizerFilter.F16K, value);\n    }\n    public get f16k(): number\n    {\n        return this.getGain(EqualizerFilter.F16K);\n    }\n\n    /**\n     * Reset all frequency bands to have gain of 0\n     * @method PIXI.sound.filters.EqualizerFilter#reset\n     */\n    reset(): void\n    {\n        this.bands.forEach((band:BiquadFilterNode) => {\n            band.gain.value = 0;\n        });\n    }\n\n    destroy(): void\n    {\n        this.bands.forEach((band:BiquadFilterNode) => {\n            band.disconnect();\n        });\n        this.bands = null;\n        this.bandsMap = null;\n    }\n}\n","import Filter from './Filter';\nimport SoundLibrary from '../SoundLibrary';\n\n/**\n * Filter for adding adding delaynode.\n *\n * @class DistortionFilter\n * @memberof PIXI.sound.filters\n * @param {Number} [amount=0] The amount of distoration from 0 to 1.\n */\nexport default class DistortionFilter extends Filter\n{\n    /**\n     * The Wave shape node use to distort\n     * @name PIXI.sound.filters.DistortionFilter#_distortion\n     * @type {WaveShaperNode}\n     * @private\n     */\n    private _distortion:WaveShaperNode;\n\n    /**\n     * The amount of distoration\n     * @name PIXI.sound.filters.DistortionFilter#_amount\n     * @type {Number}\n     * @private\n     */\n    private _amount:number;\n\n    constructor(amount:number = 0)\n    {\n        if (SoundLibrary.instance.useLegacy)\n        {\n            super(null);\n            return;\n        }\n        \n        const context = SoundLibrary.instance.context;\n        const distortion:WaveShaperNode = context.audioContext.createWaveShaper();\n\n        super(distortion);\n\n        this._distortion = distortion;\n\n        this.amount = amount;\n    }\n\n    /**\n     * @name PIXI.sound.filters.Distoration#amount\n     * @type {Number}\n     */\n    set amount(value:number)\n    {\n        value *= 1000;\n        this._amount = value;\n        const samples:number = 44100;\n        const curve:Float32Array = new Float32Array(samples);\n        const deg:number = Math.PI / 180;\n\n        let i:number = 0;\n        let x:number;\n\n        for ( ; i < samples; ++i )\n        {\n            x = i * 2 / samples - 1;\n            curve[i] = ( 3 + value ) * x * 20 * deg / ( Math.PI + value * Math.abs(x) );\n        }\n        this._distortion.curve = curve;\n        this._distortion.oversample = '4x';\n    }\n    get amount(): number\n    {\n        return this._amount;\n    }\n\n    destroy(): void\n    {\n        this._distortion = null;\n        super.destroy();\n    }\n}\n","import Filter from './Filter';\nimport SoundLibrary from '../SoundLibrary';\n\n/**\n * Filter for adding Stereo panning.\n *\n * @class StereoFilter\n * @memberof PIXI.sound.filters\n * @param {Number} [pan=0] The amount of panning, -1 is left, 1 is right, 0 is centered.\n */\nexport default class StereoFilter extends Filter\n{\n    /**\n     * The stereo panning node\n     * @name PIXI.sound.filters.StereoFilter#_stereo\n     * @type {StereoPannerNode}\n     * @private\n     */\n    private _stereo:StereoPannerNode;\n\n    /**\n     * The stereo panning node\n     * @name PIXI.sound.filters.StereoFilter#_panner\n     * @type {PannerNode}\n     * @private\n     */\n    private _panner:PannerNode;\n\n    /**\n     * The amount of panning, -1 is left, 1 is right, 0 is centered\n     * @name PIXI.sound.filters.StereoFilter#_pan\n     * @type {Number}\n     * @private\n     */\n    private _pan:number;\n\n    constructor(pan:number = 0)\n    {\n        if (SoundLibrary.instance.useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        let stereo:StereoPannerNode;\n        let panner:PannerNode;\n        let destination:AudioNode;\n        const audioContext = SoundLibrary.instance.context.audioContext;\n\n        if (audioContext.createStereoPanner)\n        {\n            stereo = audioContext.createStereoPanner();\n            destination = stereo;\n        }\n        else\n        {\n            panner = audioContext.createPanner();\n            panner.panningModel = 'equalpower';\n            destination = panner;\n        }\n\n        super(destination);\n\n        this._stereo = stereo;\n        this._panner = panner;\n\n        this.pan = pan;\n    }\n\n    /**\n     * Set the amount of panning, where -1 is left, 1 is right, and 0 is centered\n     * @name PIXI.sound.filters.StereoFilter#pan\n     * @type {Number}\n     */\n    set pan(value:number)\n    {\n        this._pan = value;\n        if (this._stereo)\n        {\n            this._stereo.pan.value = value;\n        }\n        else\n        {\n            this._panner.setPosition(value, 0, 1 - Math.abs(value));\n        }\n    }\n    get pan(): number\n    {\n        return this._pan;\n    }\n\n    destroy(): void\n    {\n        super.destroy();\n        this._stereo = null;\n        this._panner = null;\n    }\n}\n","import Filter from './Filter';\nimport SoundLibrary from '../SoundLibrary';\n\n/**\n * Filter for adding reverb. Refactored from \n * https://github.com/web-audio-components/simple-reverb/\n *\n * @class ReverbFilter\n * @memberof PIXI.sound.filters\n * @param {Number} [seconds=3] Seconds for reverb\n * @param {Number} [decay=2] The decay length\n * @param {Boolean} [reverse=false] Reverse reverb\n */\nexport default class ReverbFilter extends Filter\n{\n    /**\n     * The covolver node\n     * @name PIXI.sound.filters.ReverbFilter#_convolver\n     * @type {ConvolverNode}\n     * @private\n     */\n    private _convolver:ConvolverNode;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_seconds\n     * @type {Number}\n     * @private\n     */\n    private _seconds:number;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_decay\n     * @type {Number}\n     * @private\n     */\n    private _decay:number;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_reverse\n     * @type {Number}\n     * @private\n     */\n    private _reverse:boolean;\n\n    constructor(seconds:number = 3, decay:number = 2, reverse:boolean = false)\n    {\n        if (SoundLibrary.instance.useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        const convolver:ConvolverNode = SoundLibrary.instance.context.audioContext.createConvolver();\n\n        super(convolver);\n\n        this._convolver = convolver;\n        this._seconds = this._clamp(seconds, 1, 50);\n        this._decay = this._clamp(decay, 0, 100);\n        this._reverse = reverse;\n        this._rebuild();\n    }\n\n    /**\n     * Clamp a value\n     * @method PIXI.sound.filters.ReverbFilter#_clamp \n     * @private\n     * @param {Number} value\n     * @param {Number} min Minimum value\n     * @param {Number} max Maximum value\n     * @return {Number} Clamped number\n     */\n    private _clamp(value:number, min:number, max:number): number\n    {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    /**\n     * Length of reverb in seconds from 1 to 50\n     * @name PIXI.sound.filters.ReverbFilter#decay\n     * @type {Number}\n     * @default 3\n     */\n    get seconds():number\n    {\n        return this._seconds;\n    }\n    set seconds(seconds:number)\n    {\n        this._seconds = this._clamp(seconds, 1, 50);\n        this._rebuild();\n    }\n\n    /**\n     * Decay value from 0 to 100\n     * @name PIXI.sound.filters.ReverbFilter#decay\n     * @type {Number}\n     * @default 2\n     */\n    get decay():number\n    {\n        return this._decay;\n    }\n    set decay(decay:number)\n    {\n        this._decay = this._clamp(decay, 0, 100);\n        this._rebuild();\n    }\n\n    /**\n     * Reverse value from 0 to 1\n     * @name PIXI.sound.filters.ReverbFilter#reverse\n     * @type {Boolean}\n     * @default false\n     */\n    get reverse():boolean\n    {\n        return this._reverse;\n    }\n    set reverse(reverse:boolean)\n    {\n        this._reverse = reverse;\n        this._rebuild();\n    }\n\n    /**\n     * Utility function for building an impulse response\n     * from the module parameters.\n     * @method PIXI.sound.filters.ReverbFilter#_rebuild\n     * @private\n     */\n    private _rebuild(): void\n    {\n        const context = SoundLibrary.instance.context.audioContext;\n        const rate:number = context.sampleRate;\n        const length:number = rate * this._seconds;\n        const impulse:AudioBuffer = context.createBuffer(2, length, rate);\n        const impulseL:Float32Array = impulse.getChannelData(0);\n        const impulseR:Float32Array = impulse.getChannelData(1);\n        let n:number;\n\n        for (let i:number = 0; i < length; i++)\n        {\n            n = this._reverse ? length - i : i;\n            impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);\n            impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);\n        }\n        this._convolver.buffer = impulse;\n    }\n\n    destroy(): void\n    {\n        this._convolver = null;\n        super.destroy();\n    }\n}\n","import Filter from './Filter';\nimport SoundLibrary from '../SoundLibrary';\n\n/**\n * Combine all channels into mono channel.\n *\n * @class MonoFilter\n * @memberof PIXI.sound.filters\n */\nexport default class MonoFilter extends Filter\n{\n    /**\n     * Merger node\n     * @name PIXI.sound.filters.MonoFilter#_merge\n     * @type {ChannelMergerNode}\n     * @private\n     */\n    private _merger:ChannelMergerNode;\n\n    constructor()\n    {\n        if (SoundLibrary.instance.useLegacy)\n        {\n            super(null);\n        }\n        const audioContext:AudioContext = SoundLibrary.instance.context.audioContext;\n        const splitter:ChannelSplitterNode = audioContext.createChannelSplitter();\n        const merger:ChannelMergerNode = audioContext.createChannelMerger();\n        merger.connect(splitter);\n        super(merger, splitter);\n        this._merger = merger;\n    }\n\n    public destroy(): void\n    {\n        this._merger.disconnect();\n        this._merger = null;\n        super.destroy();\n    }\n}\n","import Filter from './Filter';\nimport SoundLibrary from '../SoundLibrary';\n\n/**\n * Creates a telephone-sound filter.\n *\n * @class TelephoneFilter\n * @memberof PIXI.sound.filters\n */\nexport default class TelephoneFilter extends Filter\n{\n    constructor()\n    {\n        if (SoundLibrary.instance.useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        const {audioContext} = SoundLibrary.instance.context;\n        const lpf1 = audioContext.createBiquadFilter();\n        const lpf2 = audioContext.createBiquadFilter();\n        const hpf1 = audioContext.createBiquadFilter();\n        const hpf2 = audioContext.createBiquadFilter();\n\n        lpf1.type = 'lowpass';\n        lpf1.frequency.value = 2000.0;\n\n        lpf2.type = 'lowpass';\n        lpf2.frequency.value = 2000.0;\n\n        hpf1.type = 'highpass';\n        hpf1.frequency.value = 500.0;\n\n        hpf2.type = 'highpass';\n        hpf2.frequency.value = 500.0;\n\n        lpf1.connect(lpf2);\n        lpf2.connect(hpf1);\n        hpf1.connect(hpf2);\n\n        super(lpf1, hpf2);\n    }\n}\n","import Filterable from \"./Filterable\";\nimport * as filters from \"./filters\";\nimport * as htmlaudio from \"./htmlaudio\";\nimport Sound from \"./Sound\";\nimport SoundLibrary from \"./SoundLibrary\";\nimport SoundSprite from \"./sprites/SoundSprite\";\nimport utils from \"./utils/SoundUtils\";\nimport * as webaudio from \"./webaudio\";\n\nconst sound = SoundLibrary.init();\n\nexport {\n    filters,\n    htmlaudio,\n    webaudio,\n    sound,\n    utils,\n    Sound,\n    SoundSprite,\n    Filterable,\n    SoundLibrary\n};\n"],"names":["assign","target","firstSource","undefined","TypeError","to","Object","i","arguments","length","nextSource","keysArray","keys","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","enumerable","polyfill","defineProperty","configurable","writable","value","input","output","this","_output","_input","Filterable","_filters","filters","forEach","filter","disconnect","connect","slice","prevFilter_1","_this","destination","source","Filter","root","noop","bind","fn","thisArg","apply","Promise","_state","_handled","_value","_deferreds","doResolve","handle","self","deferred","push","_immediateFn","cb","onFulfilled","onRejected","resolve","reject","promise","ret","e","newValue","then","finale","_unhandledRejectionFn","Handler","done","reason","ex","setTimeoutFunc","setTimeout","prototype","prom","all","arr","args","Array","call","res","val","remaining","constructor","race","values","setImmediate","err","console","warn","_setImmediateFn","_setUnhandledRejectionFn","module","exports","id","parent","_super","init","tslib_1.__extends","HTMLAudioInstance","_duration","_paused","paused","contextPaused","_parent","context","_internalStop","emit","play","_source","currentTime","_end","loop","_playing","duration","cloneNode","src","url","onplay","_onPlay","onpause","_onPause","_onVolumeChanged","volume","muted","_onPausedChanged","on","onended","pause","start","end","speed","fadeIn","fadeOut","assert","_start","Math","max","PADDING","min","onloadedmetadata","PIXI","ticker","shared","add","_onUpdate","_onComplete","progress","remove","removeAllListeners","off","utils","EventEmitter","HTMLAudioMedia","options","Audio","readyState","oldVolume","playbackRate","oldSpeed","load","callback","sound","isLoaded","instance_1","autoPlayStart","Error","removeListeners","removeEventListener","onLoad","onAbort","onError","instance","message","error","code","addEventListener","_volume","_muted","HTMLAudioContext","oldPaused","oldMuted","LoaderMiddleware","_sound","legacy","useLegacy","loaders","Loader","addPixiMiddleware","plugin","loader","use","Resource","exts","EXTENSIONS","ext","setExtensionXhrType","XHR_RESPONSE_TYPE","DEFAULT","setExtensionLoadType","LOAD_TYPE","AUDIO","BUFFER","XHR","resource","next","data","indexOf","extension","name","loaded","preload","SoundSprite","complete","media","_media","_elapsed","_updateListener","_update","WebAudioInstance","nodes","cloneBufferSource","_speed","_loop","buffer","_toSec","_fadeIn","_fadeOut","_lastUpdate","_now","_enabled","time","enabled","script","_progress","audioContext","force","now","delta","position","gain","maxVolume","percent","stop","bufferSource","createBufferSource","createScriptProcessor","WebAudioNodes","BUFFER_SIZE","createGain","analyser","createAnalyser","destroy","orig","clone","WebAudioMedia","_nodes","useXHR","isPlayable","_loadUrl","_loadPath","_decode","request","XMLHttpRequest","open","responseType","onload","response","send","fs","require","readFile","arrayBuffer","ArrayBuffer","view","Uint8Array","decode","_instances","_sprites","_autoPlayOptions","isPlaying","autoPlay","singleInstance","sprites","addSprites","_preload","Sound","HTMLAudioElement","freeze","SoundLibrary","results","alias","sprite","_removeInstances","removeSprites","name_1","offset","_createInstance","once","_poolInstance","index","splice","_pool","pop","create","SoundUtils","hertz","seconds","from","createBuffer","fArray","getChannelData","angle","sampleRate","PI","sin","canvas","document","createElement","width","height","fill","baseTexture","BaseTexture","fromCanvas","getContext","fillStyle","step","ceil","amp","j","datum","fillRect","PLAY_ID","ctx","WebAudioContext","AudioContext","compressor","createDynamicsCompressor","_ctx","_offlineCtx","OfflineAudioContext","_unlocked","window","state","_unlock","playEmptySound","win","webkitAudioContext","webkitOfflineAudioContext","close","suspend","resume","decodeAudioData","supported","_webAudioContext","_htmlAudioContext","_sounds","_context","ObjectAssign","PromisePolyfill","install","__pixiSound","global","PixiJS","get","defineProperties","htmlaudio","webaudio","sourceOptions","_getOptions","overrides","_useLegacy","exists","togglePause","toggleMute","find","removeAll","f32","f64","f125","f250","f500","f1k","f2k","f4k","f8k","f16k","bands","f","EqualizerFilter","F32","type","F64","F125","F250","F500","F1K","F2K","F4K","F8K","F16K","map","band","createBiquadFilter","Q","frequency","bandsMap","node","getGain","setGain","amount","distortion","createWaveShaper","_distortion","DistortionFilter","_amount","x","curve","Float32Array","deg","abs","oversample","pan","stereo","panner","createStereoPanner","createPanner","panningModel","_stereo","_panner","StereoFilter","_pan","setPosition","decay","reverse","convolver","createConvolver","_convolver","_seconds","_clamp","_decay","_reverse","_rebuild","ReverbFilter","n","rate","impulse","impulseL","impulseR","random","pow","splitter","createChannelSplitter","merger","createChannelMerger","_merger","MonoFilter","lpf1","lpf2","hpf1","hpf2"],"mappings":"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"}