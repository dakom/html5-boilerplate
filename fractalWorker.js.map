{"version":3,"sources":["webpack:///fractalWorker.js","webpack:///webpack/bootstrap f65bb1cb1e77daaccdc0","webpack:///./src/workers/fractal/FractalWorkerInit.ts","webpack:///./src/workers/fractal/mandelbrot/Mandelbrot.ts"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","6","value","Mandelbrot_1","WorkerInit","mandelbrot","addEventListener","e","data","cmd","Mandelbrot","imgData","width","height","self","postMessage","dataBuf","crunchData","iterations","buf","7","_imgData","this","currentOriginReal","currentOriginImaginary","currentRadius","zoom","factor","palettes","center","x","y","maxIterations","imgBuf","Uint8ClampedArray","fill","updatePalette","drawFractal","unshift","pop","length","col","push","Math","random","or","oi","radius","scaleX","scaleY","cr","ci","zr","zi","iter","zr2","zi2","putPixel","znr","zni","offset","updateZoom","nx","ny"],"mappings":"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","file":"fractalWorker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 6);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 6:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Mandelbrot_1 = __webpack_require__(7);\nvar WorkerInit = (function () {\n    function WorkerInit() {\n        var mandelbrot;\n        addEventListener('message', function (e) {\n            if (e.data.cmd == 'init') {\n                mandelbrot = new Mandelbrot_1.Mandelbrot(e.data.imgData, e.data.width, e.data.height);\n                self.postMessage({\n                    cmd: 'ready'\n                });\n            }\n            if (e.data.cmd == 'getData') {\n                var dataBuf = e.data.dataBuf;\n                mandelbrot.crunchData(dataBuf, e.data.iterations);\n                //Second property will Transfer the ArrayBuffer rather than copy\n                self.postMessage({\n                    cmd: 'data',\n                    buf: dataBuf\n                }, [\n                    dataBuf\n                ]);\n            }\n        });\n    }\n    return WorkerInit;\n}());\nnew WorkerInit();\n\n\n/***/ }),\n\n/***/ 7:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Mandelbrot = (function () {\n    function Mandelbrot(_imgData, width, height) {\n        this._imgData = _imgData;\n        this.width = width;\n        this.height = height;\n        this.currentOriginReal = 0.0;\n        this.currentOriginImaginary = 0.0;\n        this.currentRadius = 2.0;\n        this.zoom = {\n            factor: .9\n        };\n        this.palettes = [];\n        //these settings are arbitrary, tweaked by hand to get an average interesting view\n        this.zoom.center = {\n            x: 920,\n            y: 96\n        };\n        this.currentOriginReal = 0.3988906701602579;\n        this.currentOriginImaginary = 0.31251882189683733;\n        this.currentRadius = 0.005477854899906823;\n    }\n    Mandelbrot.prototype.crunchData = function (dataBuf, maxIterations) {\n        //making the array just uses the ArrayBuffer as the backing store, no copy\n        var imgBuf = new Uint8ClampedArray(dataBuf);\n        imgBuf.fill(0);\n        this.updatePalette(maxIterations);\n        this.drawFractal(imgBuf, maxIterations, this.currentOriginReal, this.currentOriginImaginary, this.currentRadius, this.width, this.height);\n        //cycle the palettes so we can see some movement ;)\n        this.palettes.unshift(this.palettes.pop());\n    };\n    Mandelbrot.prototype.updatePalette = function (maxIterations) {\n        for (var i = this.palettes.length; i <= maxIterations; i++) {\n            var col = [];\n            col.push(Math.random() * 0xFF);\n            col.push(Math.random() * 0xFF);\n            col.push(Math.random() * 0xFF);\n            col.push(0xFF);\n            this.palettes.push(col);\n        }\n    };\n    //based off https://github.com/thomasbratt/Mandelbrot\n    Mandelbrot.prototype.drawFractal = function (imgBuf, maxIterations, or, oi, radius, width, height) {\n        var scaleX = (2.0 * radius) / width;\n        var scaleY = (2.0 * radius) / height;\n        for (var y = 0; y < height; ++y) {\n            for (var x = 0; x < width; ++x) {\n                var cr = (or - radius) + x * scaleX;\n                var ci = (oi - radius) + y * scaleY;\n                var zr = 0.0;\n                var zi = 0.0;\n                for (var iter = 0; iter < maxIterations; ++iter) {\n                    var zr2 = zr * zr;\n                    var zi2 = zi * zi;\n                    if (zr2 + zi2 >= 4.0) {\n                        this.putPixel(imgBuf, x, y, this.palettes[iter]);\n                        break;\n                    }\n                    var znr = zr2 - zi2 + cr;\n                    var zni = 2.0 * (zr * zi) + ci;\n                    zr = znr;\n                    zi = zni;\n                }\n            }\n        }\n    };\n    Mandelbrot.prototype.putPixel = function (imgBuf, x, y, col) {\n        var offset = (((y * this.width) + x) * 4);\n        imgBuf[offset] = col[0];\n        imgBuf[offset + 1] = col[1];\n        imgBuf[offset + 2] = col[2];\n        imgBuf[offset + 3] = col[3];\n    };\n    //not really used, but keeping around as a reference anyway\n    //this.zoom center could be based off mouse click, for example\n    Mandelbrot.prototype.updateZoom = function () {\n        var nx = (2.0 * this.currentRadius * this.zoom.center.x) / this.width;\n        var ny = (2.0 * this.currentRadius * this.zoom.center.y) / this.height;\n        this.currentOriginReal += (nx - this.currentRadius);\n        this.currentOriginImaginary += (ny - this.currentRadius);\n        this.currentRadius *= this.zoom.factor;\n    };\n    return Mandelbrot;\n}());\nexports.Mandelbrot = Mandelbrot;\n\n\n/***/ })\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// fractalWorker.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f65bb1cb1e77daaccdc0","import { Mandelbrot } from './mandelbrot/Mandelbrot';\n\nclass WorkerInit {\n    constructor() {\n\n        let mandelbrot: Mandelbrot;\n        \n        addEventListener('message', (e: MessageEvent) => {\n            if (e.data.cmd == 'init') {\n                mandelbrot = new Mandelbrot(e.data.imgData, e.data.width, e.data.height);\n\n                (self as any).postMessage({\n                    cmd: 'ready'\n                });\n            }\n\n            if (e.data.cmd == 'getData') {\n                let dataBuf: ArrayBuffer = e.data.dataBuf;\n\n                mandelbrot.crunchData(dataBuf, e.data.iterations);\n\n                //Second property will Transfer the ArrayBuffer rather than copy\n                (self as any).postMessage({\n                    cmd: 'data',\n                    buf: dataBuf\n                }, [\n                        dataBuf\n                    ]);\n            }\n        });\n    }\n}\n\nnew WorkerInit();\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/workers/fractal/FractalWorkerInit.ts","\n\ninterface Zoom {\n    center?: {\n        x: number,\n        y: number\n    },\n    factor:number\n}\n\nexport class Mandelbrot {\n    private currentOriginReal: number = 0.0;\n    private currentOriginImaginary: number = 0.0;\n    private currentRadius: number = 2.0;\n    private zoom:Zoom = {\n        factor: .9\n    }\n\n    private palettes: Array<Array<number>> = [];\n\n    constructor(private _imgData: ImageData, private width: number, private height: number) {\n        //these settings are arbitrary, tweaked by hand to get an average interesting view\n        this.zoom.center = {\n           x: 920,\n           y: 96\n        };\n\n        this.currentOriginReal = 0.3988906701602579;\n        this.currentOriginImaginary = 0.31251882189683733;\n        this.currentRadius = 0.005477854899906823;\n    }\n\n    \n\n    crunchData(dataBuf: ArrayBuffer, maxIterations:number): void {\n        //making the array just uses the ArrayBuffer as the backing store, no copy\n        let imgBuf: Uint8ClampedArray = new Uint8ClampedArray(dataBuf);\n        imgBuf.fill(0);\n        this.updatePalette(maxIterations);\n\n        this.drawFractal(imgBuf, maxIterations, this.currentOriginReal, this.currentOriginImaginary, this.currentRadius,  this.width, this.height);\n        \n        //cycle the palettes so we can see some movement ;)\n        this.palettes.unshift(this.palettes.pop());\n    }\n\n    updatePalette(maxIterations:number) {\n        for (let i = this.palettes.length; i <= maxIterations; i++) {\n            let col: Array<number> = [];\n            col.push(Math.random() * 0xFF);\n            col.push(Math.random() * 0xFF);\n            col.push(Math.random() * 0xFF);\n            col.push(0xFF);\n\n            this.palettes.push(col);\n        }\n    }\n    \n    //based off https://github.com/thomasbratt/Mandelbrot\n\n    drawFractal(imgBuf: Uint8ClampedArray, maxIterations:number, or: number, oi: number, radius: number, width: number, height: number) {\n        \n        let scaleX:number = (2.0 * radius) / width;\n        let scaleY:number = (2.0 * radius) / height;\n\n        for (var y = 0; y < height; ++y) {\n            for (var x = 0; x < width; ++x) {\n                let cr:number = (or - radius) + x * scaleX;\n                let ci:number = (oi - radius) + y * scaleY;\n                let zr:number = 0.0;\n                let zi:number = 0.0;\n                \n                for (let iter:number = 0; iter < maxIterations; ++iter) {\n                    let zr2:number = zr * zr;\n                    let zi2:number = zi * zi;\n\n                    if (zr2 + zi2 >= 4.0) {\n                        \n                        this.putPixel(imgBuf, x, y, this.palettes[iter]);\n                        break;\n                    }\n\n                    let znr:number = zr2 - zi2 + cr;\n                    let zni:number = 2.0 * (zr * zi) + ci;\n                    zr = znr;\n                    zi = zni;\n                }\n\n               \n\n            }\n        }\n    }\n   \n    putPixel(imgBuf: Uint8ClampedArray, x: number, y: number, col: Array<number>) {\n\n        let offset: number = (((y * this.width) + x) * 4);\n\n        \n        imgBuf[offset] = col[0];\n        imgBuf[offset + 1] = col[1];\n        imgBuf[offset + 2] = col[2];\n        imgBuf[offset + 3] = col[3];\n    }\n\n    //not really used, but keeping around as a reference anyway\n    //this.zoom center could be based off mouse click, for example\n    updateZoom() {\n        let nx:number = (2.0 * this.currentRadius * this.zoom.center.x) / this.width;\n        let ny:number = (2.0 * this.currentRadius * this.zoom.center.y) / this.height;\n\n        this.currentOriginReal += (nx - this.currentRadius);\n        this.currentOriginImaginary += (ny - this.currentRadius);\n        this.currentRadius *= this.zoom.factor;\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/workers/fractal/mandelbrot/Mandelbrot.ts"],"sourceRoot":""}